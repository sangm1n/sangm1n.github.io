<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TILs on sangminlog</title>
    <link>http://sangm1n.github.io/til/</link>
    <description>Recent content in TILs on sangminlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 18 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://sangm1n.github.io/til/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TIL - 2020년 10월 18일</title>
      <link>http://sangm1n.github.io/til/2020-10-18/</link>
      <pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10-18/</guid>
      <description>💪 Today I Learned Brunch API 설계  GET /users/{user-idx} GET /users/{user-idx}/intro GET /users/{user-idx}/career GET /users/{user-idx}/post-list GET /users/{user-idx}/category-list  우선은 사용자 페이지 위주로 API를 설계하기 시작했다. 사실 브런치 어플은 웹과 다르게 카카오 계정으로 로그인만 허용해놨다. 그래서 회원가입 API는 일단 뒷전으로 미루고 GET을 통해 조회하는 API들에 집중했다.
🏃 한마디 지금은 전부 path variable로 처리했는데 옳은 방법인지 잘 모르겠다. query string으로 넘겼을 때와 어떤 차이가 있는지 더 알아봐야겠다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 17일</title>
      <link>http://sangm1n.github.io/til/2020-10-17/</link>
      <pubDate>Sat, 17 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10-17/</guid>
      <description>💪 Today I Learned 서버 재구축  Server program : nginx  어제 AWS 계정을 새로 만든 탓에 서버를 다시 구축했다. phpmyadmin 외부 접속 시키는 것에 반나절을 투자했다. 원래 저번주 과제 때 처리해줬으면 수월하게 했을텐데 처음하는 것이라 오래 걸렸던 것 같다. 사실 경로를 잘못 알아 계속 다른 파일만 수정하고 있었다.
cd /etc/phpmyadmin # phpmyadmin configuration file sudo vi config.inc.php 🏃 한마디 심지어 API 하나 설계하는 데에도 엄청난 시간을 쏟았다. 하나의 API에서 여러 개의 쿼리를 받아오고 싶은데 도무지 결과값 반환이 되지 않았다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 16일</title>
      <link>http://sangm1n.github.io/til/2020-10-16/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10-16/</guid>
      <description>💪 Today I Learned brunch API 설계  Back-end Language : php DBMS : RDS + mySQL  REST하게 작성하기 위해 많은 자료를 참고해야겠다.
🏃 한마디 AWS 계정 만든지 3주도 안되서 85% 이상 썼다고 메일이 왔다. 서버 구축하고 테스트 용으로 인스턴스를 추가해서 만든 탓이였다. 급한대로 새로운 계정을 하나 생성했고 기존에 있는 인스턴스는 모두 삭제했다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 15일</title>
      <link>http://sangm1n.github.io/til/2020-10-15/</link>
      <pubDate>Thu, 15 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10-15/</guid>
      <description>💪 Today I Learned Classification model error  Noise : 고칠 수 없는 원본 데이터의 결함 Bias : 데이터 내에 있는 모든 정보를 고려하지 않아 잘못된 것들을 학습하는 경향  Underfitting 유발   Variance : 데이터의 너무 세세한 부분까지 학습하여 모델 변동성이 커짐  Overfitting 유발    Model development process  feature selection algorithm selection hyper parameter tuning evaluation  위와 같은 시퀀스로 진행되는데, 평가를 제외한 모든 과정에서 cross-validation은 필수다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 14일</title>
      <link>http://sangm1n.github.io/til/2020-10-14/</link>
      <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10-14/</guid>
      <description>💪 Today I Learned API  Application Programming Interface  소프트 스퀘어드 4주차 수업 내용은 API였다. 전공자로써 수도 없이 들어본 용어이지만 정작 정확한 의미를 모르고 있었다. 쉽게 program 간의 매개체 정도로 정의할 수 있을 것 같다.
조금 더 쉬운 예시를 들자면, 사람이 스마트폰 홈 화면을 보기 위해 전원 버튼을 누르는 모습을 상상해보자. 사람은 전원 버튼을 누르면 홈 화면을 볼 수 있다는 사실을 알고 있다. 하지만 어떻게 홈 화면을 보여주는지 내부 로직은 모른다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 13일</title>
      <link>http://sangm1n.github.io/til/2020-10-13/</link>
      <pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10-13/</guid>
      <description>💪 Today I Learned JOIN  INNER JOIN LEFT JOIN RIGHT JOIN  join은 관계형 데이터베이스에서 굉장히 많이 사용한다. 나도 이번 과제를 하면서 수도 없이 사용했고, 그 중 가장 자주 사용한 세 개의 조인에 대해 알아봤다.
inner join은 교집합이라고 보면 된다. ON 뒤에 두 테이블이 결합하는 조건을 나타낸다.
SELECT * FROM tableA A JOIN tableB B ON A.KEY = B.KEY left join은 왼쪽 테이블 전체와 두 테이블의 교집합 부분을 나타낸다. 반면 right join은 오른쪽 테이블 전체와 두 테이블의 교집합 부분을 함께 나타낸다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 12일</title>
      <link>http://sangm1n.github.io/til/2020-10-12/</link>
      <pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10-12/</guid>
      <description>💪 Today I Learned Brunch ERD 수정  AqueryTool 이용 데이터 구축을 위한 ERD 최종본  🏃 한마디 ERD 설계를 완성짓는 데 생각보다 너무 오래 걸렸다. 그 외 모든 시간은 한 방 쿼리 작성하는 데 쏟았다. 중요한 몇몇 쿼리문을 정리하여 포스팅하고 싶지만 과제를 기간 안에 끝마치지 못할 것 같아 수요일 이후에 여유가 생기면 작성해야겠다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 11일</title>
      <link>http://sangm1n.github.io/til/2020-10-11/</link>
      <pubDate>Sun, 11 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10-11/</guid>
      <description>💪 Today I Learned Brunch ERD 수정  AqueryTool 이용  어제 설계했던 ERD를 수정했다. 큰 맥락에서 보면 User / Post / Comment / Follow 네 개의 테이블이 주축을 이룬다. 나머지 테이블들은 모두 카테고리컬한 테이블이라고 봐도 무방하다.
aquerytool의 모든 테이블 생성 SQL 기능을 이용해 테이블을 생성했으니 데이터를 넣는 일만 남았다.
🏃 한마디 사실 오늘 헌혈해서 많은 시간을 할애하지는 못했다. 그래도 어제보다 더 그럴싸하게 다이어그램을 만들어낸 것 같다. 내일은 DB에 데이터를 넣어 실제 앱 화면처럼 데이터를 뽑아내는 한 방 쿼리를 작성해야겠다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 10일</title>
      <link>http://sangm1n.github.io/til/2020-10-10/</link>
      <pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10-10/</guid>
      <description>💪 Today I Learned Brunch ERD 설계  AqueryTool 이용  원래는 당근마켓 ERD 설계를 하려고 했으나 너무 어려워 보여서 Brunch 로 타겟을 바꿨다.
attribute 뽑아내는 것까지는 여차저차 했는데, entity로 묶는 것부터가 난관이었다. 아마 내일 싹 엎어야할 것 같지만 기록해둘겸 사진으로 저장해놨다. 생각보다 many-to-many 관계를 정의하는 것이 어려웠다.
🏃 한마디 ERD 설계가 끝나야 쿼리문을 작성하고 진도를 나가는데 굉장히 더딘 속도로 진행중인 것 같다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 9일</title>
      <link>http://sangm1n.github.io/til/2020-10-09/</link>
      <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10-09/</guid>
      <description>💪 Today I Learned Support Vector Machine  경계에 있는 몇 개의 점으로 hyperplane 찾음 차원(kernel) 늘리기  이번주 딥러닝/클라우드 수업 내용은 SVM이었다. 앞부분에 나온 Decision tree나 Random forest는 인공지능 수업 때 배웠기도 해서 과제 진행하는 데 별 무리가 없었다. ICT 인턴십 면접 때 CTO 분께서 SVM에 대해 설명해달라 하셨는데 대답하지 못한 경험이 있다. 그래서 더 열심히 수업들은 것 같다.
SVM은 분류 알고리즘 중 하나로 다른 알고리즘과 다르게 몇 개의 점만을 이용하여 초평면을 구한다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 8일</title>
      <link>http://sangm1n.github.io/til/2020-10-08/</link>
      <pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10-08/</guid>
      <description>💪 Today I Learned 탄력적 IP  고정된 IP 주소  AWS에서 탄력적 IP (EIP, Elastic IP)를 할당할 수 있다. AWS 인스턴스의 퍼블릭 IP는 유동적인 IP 주소이기 때문에 인스턴스를 중지하고 다시 시작할 경우 해당 IP 주소가 변경된다. 따라서 실제 서비스를 만들고자 할 때 유동 IP를 사용해서는 안된다.
이럴 때 사용하는 것이 고정 IP이다. 단, EIP는 유료 서비스이므로 항상 주의하자.
phpmyadmin VS mysql workbench  둘 다 mysql 접근  소프트 스퀘어드 2주차 과제를 진행하며 phpmyadmin과 mysql workbench를 사용하여 mysql에 외부 접속을 해봤다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 7일</title>
      <link>http://sangm1n.github.io/til/2020-10-07/</link>
      <pubDate>Wed, 07 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10-07/</guid>
      <description>💪 Today I Learned rDBMS  테이블 간 관계가 형성된 데이터베이스  나는 사실 디비를 잘 모른다. 2학년 1학기 때 수업을 듣긴 했는데 공부를 안하기도 했고, 그 이후 프로젝트 진행할 때도 다루지를 않았다. 연구실에서 데이터 분석 공부를 할 때 필요성을 느꼈고 꼭 배워보고 싶었는데 드디어 제대로 해볼 기회가 생겼다.
위에서 정의했듯이 rDB는 테이블 간 관계가 형성된 데이터베이스를 뜻한다. 이것을 관리하는 rDBMS의 예로는 MySQL / postgreSQL / Oracle 등이 있다.
데이터 모델링  정제된 데이터를 만들기 위한 과정  SQL은 항상 정제된 데이터를 필요로 한다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 6일</title>
      <link>http://sangm1n.github.io/til/2020-10-06/</link>
      <pubDate>Tue, 06 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10-06/</guid>
      <description>💪 Today I Learned Apache VS Nginx  Apache : MPM 방식, 스레드/프로세스 기반 구조 Nginx : 비동기 Event-Driven 기반 구조  발표 자료 만들다가 문득 궁금해져서 찾아봤다. 2주에 걸쳐 서버 프로그램으로 apache와 nginx를 사용했는데 정작 둘의 차이점은 모르고 있었다. 그래서 오늘 포스팅에 간략하게나마 정리했다. 간단하게 동시 접속 요청이 많을 경우 nginx를 사용하면 될 것 같다.
hard link VS symbolic link (soft link)  hard link : 원본 파일과 동일한 inode를 가진다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 5일</title>
      <link>http://sangm1n.github.io/til/2020-10-05/</link>
      <pubDate>Mon, 05 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10-05/</guid>
      <description>💪 Today I Learned AWS 서버 도메인 적용  가비아 도메인 구매 http://sangmini.site  가비아에서 도메인을 하나 구매했다. 무료 도메인을 쓰고 싶었으나 소프트 스퀘어드 수업에서 별로 비싸지 않으니까 아까워하지 말라더라. (1900원/년 이면 진짜 싸긴 싸다)
구매한 도메인을 AWS 서버에 적용했다. 서버 프로그램으로 nginx를 사용 중인데, server block에 해당 도메인을 추가하는 것으로 쉽게 적용할 수 있었다.
https 적용  certbot 이용 (with letsencrypt)  나중에 모의 외주를 하거나 실제 외주를 진행할 때 https 적용은 필수라고 한다.</description>
    </item>
    
    <item>
      <title>TIL 다시 시작하기</title>
      <link>http://sangm1n.github.io/til/2020-10-04/</link>
      <pubDate>Sun, 04 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10-04/</guid>
      <description>Restart 올해 7월 14일부터 이전 블로그에 TIL을 작성하기 시작했다. 그곳에서의 기록이 9월 19일에 멈췄기 때문에 3주 정도 TIL 작성을 쉬었다. 원래 이 블로그를 만들자마자 다시 시작할 계획이었는데 이런 저런 핑계로 미루게 되었다. 추석 연휴도 끝났으니 더는 미루면 안되겠다고 판단했다.
TIL 규칙 정하기 기존에 나는 아래 사진처럼 Today I Learned / Tomorrow I will Learn 두 파트로 작성해왔다. 애초에 블로그에 많은 시간을 투자하지 않기 위해 &amp;ldquo;기록만 하자&amp;rdquo; 라는 마인드로 진행했는데 지금 보니 턱없이 부실해 보인다.</description>
    </item>
    
  </channel>
</rss>
