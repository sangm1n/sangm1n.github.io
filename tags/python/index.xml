<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on sangminlog</title>
    <link>http://sangm1n.github.io/tags/python/</link>
    <description>Recent content in Python on sangminlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://sangm1n.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Algorithm - 아이디어를 코드로 바꾸는 구현</title>
      <link>http://sangm1n.github.io/implementation-algorithm/</link>
      <pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/implementation-algorithm/</guid>
      <description>코딩 테스트에서 어떤 문제를 풀든 코드를 작성하는 과정은 필수기 때문에 구현은 모든 문제 유형을 포함하는 개념이라고 볼 수 있다.
Implementation Algorithm 특히 풀이를 떠올리는 것은 쉽지만 소스코드로 옮기기 어려운 문제 를 구현 유형의 문제라고 본다. 알고리즘은 간단한데 코드가 굉장히 길어지는 문제, 문자열을 입력받아 한 문자 단위로 끊어서 리스트에 넣어야 하는 문제 등이 까다로운 구현 유형의 문제라고 할 수 있다.
저자는 이 책에서 완전 탐색과 시뮬레이션 두 개의 유형을 구현으로 묶었다.</description>
    </item>
    
    <item>
      <title>이취코 - 게임 개발</title>
      <link>http://sangm1n.github.io/problem-solving/ct-game-development/</link>
      <pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/ct-game-development/</guid>
      <description>게임 개발 이것이 취업을 위한 코딩 테스트다
문제 게임 캐릭터가 맵 안에서 움직이는 시스템이 있다.
캐릭터가 있는 장소는 1 X 1 크기의 정사각형으로 이뤄진 N X M 크기의 직사각형으로, 각각의 칸은 육지 또는 바다이다. 캐릭터는 동서남북 중 한 곳을 바라본다.
맵의 각 칸은 (A, B)로 나타낼 수 있고, A는 북쪽으로부터 떨어진 칸의 개수, B는 서쪽으로부터 떨어진 칸의 개수이다.
캐릭터는 상하좌우로 움직일 수 있고, 바다로 되어 있는 공간에는 갈 수 없다. 움직임을 위한 매뉴얼은 다음과 같다.</description>
    </item>
    
    <item>
      <title>이취코 - 왕실의 나이트</title>
      <link>http://sangm1n.github.io/problem-solving/ct-royal-knight/</link>
      <pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/ct-royal-knight/</guid>
      <description>왕실의 나이트 이것이 취업을 위한 코딩 테스트다
문제 왕실 정원은 체스판과 같은 8 X 8 좌표 평면이다. 왕실 정원의 특정한 한 칸에 나이트가 서 있다.
나이트는 말을 타고 있기 때문에 이동을 할 때는 L자 형태로만 이동할 수 있으며 정원 밖으로는 나갈 수 없다.
나이트는 특정한 위치에서 다음과 같은 2가지 경우로 이동할 수 있다.
 수평으로 두 칸 이동한 뒤에 수직으로 한 칸 이동하기 수직으로 두 칸 이동한 뒤에 수평으로 한 칸 이동하기  이처럼 좌표 평면상 나이트의 위치가 주어졌을 때 나이트가 이동할 수 있는 경우의 수를 구하시오.</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 1022_소용돌이 예쁘게 출력하기</title>
      <link>http://sangm1n.github.io/problem-solving/boj-1022/</link>
      <pubDate>Sun, 29 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-1022/</guid>
      <description>1022 - 소용돌이 예쁘게 출력하기 문제 크기가 무한인 정사각형 모눈종이가 있다. 모눈종이의 각 정사각형은 행과 열의 쌍으로 표현할 수 있다.
이 모눈종이 전체를 양의 정수의 소용돌이 모양으로 채울 것이다. 일단 숫자 1을 0행 0열에 쓴다.
그리고 나서 0행 1열에 숫자 2를 쓴다. 거기서 부터 소용돌이는 반시계 방향으로 시작된다. 다음 숫자는 다음과 같이 채우면 된다.
이 문제는 위와 같이 채운 것을 예쁘게 출력하면 된다. r1, c1, r2, c2가 입력으로 주어진다. r1, c1은 가장 왼쪽 위 칸이고, r2, c2는 가장 오른쪽 아래 칸이다.</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 10994_별 찍기_19</title>
      <link>http://sangm1n.github.io/problem-solving/boj-10994/</link>
      <pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-10994/</guid>
      <description>10994 - 별 찍기-19 문제 예제를 보고 규칙을 유추한 뒤에 별을 찍어 보세요.
코드 한마디 맨날 삼각형 관련 별 찍기만 하다가 이렇게 특이한 문제를 풀어보니 규칙 찾기 굉장히 힘들었다.</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 10997_별 찍기_22</title>
      <link>http://sangm1n.github.io/problem-solving/boj-10997/</link>
      <pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-10997/</guid>
      <description>10997 - 별 찍기-22 문제 예제를 보고 규칙을 유추한 뒤에 별을 찍어 보세요.
코드 한마디 이 전에 풀었던 문제에서 힌트를 얻어서 풀 수 있었지 처음 보는 유형이었다면 골치 아팠을 것 같다.</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 1789_수들의 합</title>
      <link>http://sangm1n.github.io/problem-solving/boj-1789/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-1789/</guid>
      <description>8979 - 수들의 합 문제 서로 다른 N개의 자연수의 합이 S라고 한다. S를 알 때, 자연수 N의 최댓값은 얼마일까?
코드 한마디 입력 받은 S까지 for문 돌리는 코드가 왜 안되는지 아직도 모르겠다. 문제에서 주어진 최대 범위 4,294,967,295까지 돌렸더니 통과하길래 그냥 while문으로 작성했다.</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 8979_올림픽</title>
      <link>http://sangm1n.github.io/problem-solving/boj-8979/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-8979/</guid>
      <description>8979 - 올림픽 문제 올림픽은 참가에 의의가 있기에 공식적으로는 국가간 순위를 정하지 않는다. 그러나, 많은 사람들이 자신의 국가가 얼마나 잘 하는지에 관심이 많기 때문에 비공식적으로는 국가간 순위를 정하고 있다. 두 나라가 각각 얻은 금, 은, 동메달 수가 주어지면, 보통 다음 규칙을 따라 어느 나라가 더 잘했는지 결정한다.
 금메달 수가 더 많은 나라 금메달 수가 같으면, 은메달 수가 더 많은 나라 금, 은메달 수가 모두 같으면, 동메달 수가 더 많은 나라  각 국가는 1부터 N 사이의 정수로 표현된다.</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 2033_반올림</title>
      <link>http://sangm1n.github.io/problem-solving/boj-2033/</link>
      <pubDate>Thu, 26 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-2033/</guid>
      <description>2033 - 반올림 문제 정수 N이 주어져 있을 때 이 수가 10보다 크면 일의 자리에서 반올림을 하고, 이 결과가 100보다 크면 다시 10의 자리에서 반올림을 하고, 또 이 수가 1000보다 크면 100의 자리에서 반올림을 하고.. (이하 생략) 이러한 연산을 한 결과를 출력하시오.
코드 한마디 처음엔 round 함수만 사용하면 풀리는 간단한 문제인 줄 알았는데 아니였다.</description>
    </item>
    
    <item>
      <title>Algorithm - 당장 좋은 것만 선택하는 그리디</title>
      <link>http://sangm1n.github.io/greedy-algorithm/</link>
      <pubDate>Sun, 22 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/greedy-algorithm/</guid>
      <description>그리디 알고리즘은 단어 그대로 번역하여 탐욕 알고리즘으로도 소개된다. 탐욕적이라는 말이 무슨 뜻일까?
Greedy Algorithm 그리디 알고리즘에서의 탐욕적이다 라는 말은 현재 상황에서 당장 좋은 것만 고르는 방법을 의미한다. 그래서 어떻게 보면 무식하게 문제를 푸는 방법이라고 볼 수 있다. 단지 매 순간마다 가장 좋아보이는 것을 선택하고, 이 선택이 나중에 어떠한 영향을 미칠지에 대해서는 전혀 고려하지 않는다.
코딩 테스트에서 나오는 그리디 알고리즘 문제들은 타 알고리즘과 비교했을 때 미리 외우고 있지 않아도 풀 수 있을 가능성이 높다고 한다.</description>
    </item>
    
    <item>
      <title>코딩 테스트를 위한 파이썬 라이브러리</title>
      <link>http://sangm1n.github.io/basic-of-python/</link>
      <pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/basic-of-python/</guid>
      <description>소프트 스퀘어드도 끝났겠다 한동안 놓고 있던 알고리즘 공부를 다시 시작해보려고 한다. 두 달 동안 파이썬 자체를 사용하지 않아 빠르게 훑고 지나가는 식으로 정리해봤다. 이전 블로그에 파이썬 알고리즘 인터뷰 책을 참고하여 정리한 적이 있는데, 이번에는 몇 주 전 새로 산 나동빈님의 이것이 취업을 위한 코딩 테스트다 라는 책을 참고했다. 개인적으로 후자가 조금 더 이해하기 수월한 편이었다.
유용한 라이브러리 내장 함수 파이썬에는 굳이 import 명령어를 사용하지 않아도 기본적으로 쓸 수 있는 내장 함수가 있다.</description>
    </item>
    
  </channel>
</rss>
