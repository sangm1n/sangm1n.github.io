<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on sangminlog</title>
    <link>http://sangm1n.github.io/tags/python/</link>
    <description>Recent content in Python on sangminlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://sangm1n.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>BOJ/백준 - 10773번 제로</title>
      <link>http://sangm1n.github.io/problem-solving/boj-10773/</link>
      <pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-10773/</guid>
      <description>10773 - 제로 문제 나코더 기장 재민이는 동아리 회식을 준비하기 위해서 장부를 관리하는 중이다.
재현이는 재민이를 도와서 돈을 관리하는 중인데, 애석하게도 항상 정신없는 재현이는 돈을 실수로 잘못 부르는 사고를 치기 일쑤였다.
재현이는 잘못된 수를 부를 때마다 0을 외쳐서, 가장 최근에 재민이가 쓴 수를 지우게 시킨다.
재민이는 이렇게 모든 수를 받아 적은 후 그 수의 합을 알고 싶어 한다. 재민이를 도와주자!
코드 한마디 스택의 원리를 이용해 쉽게 풀 수 있었다.</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 7568번 덩치</title>
      <link>http://sangm1n.github.io/problem-solving/boj-7568/</link>
      <pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-7568/</guid>
      <description>7568 - 덩치 문제 우리는 사람의 덩치를 키와 몸무게, 이 두 개의 값으로 표현하여 그 등수를 매겨보려고 한다. 어떤 사람의 몸무게가 x kg이고 키가 y cm라면 이 사람의 덩치는 (x,y)로 표시된다.
두 사람 A 와 B의 덩치가 각각 (x,y), (p,q)라고 할 때 x&amp;gt;p 그리고 y&amp;gt;q 이라면 우리는 A의 덩치가 B의 덩치보다 &amp;ldquo;더 크다&amp;quot;고 말한다.
예를 들어 어떤 A, B 두 사람의 덩치가 각각 (56,177), (45,165) 라고 한다면 A의 덩치가 B보다 큰 셈이 된다.</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 8980번 택배</title>
      <link>http://sangm1n.github.io/problem-solving/boj-8980/</link>
      <pubDate>Tue, 08 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-8980/</guid>
      <description>8980번 - 택배 문제 아래 그림과 같이 직선 도로상에 왼쪽부터 오른쪽으로 1번부터 차례대로 번호가 붙여진 마을들이 있다. 마을에 있는 물건을 배송하기 위한 트럭 한 대가 있고, 트럭이 있는 본부는 1번 마을 왼쪽에 있다. 이 트럭은 본부에서 출발하여 1번 마을부터 마지막 마을까지 오른쪽으로 가면서 마을에 있는 물건을 배송한다.
각 마을은 배송할 물건들을 박스에 넣어 보내며, 본부에서는 박스를 보내는 마을번호, 박스를 받는 마을번호와 보낼 박스의 개수를 알고 있다. 박스들은 모두 크기가 같다. 트럭에 최대로 실을 수 있는 박스의 개수, 즉 트럭의 용량이 있다.</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 17262번 팬덤이 넘쳐흘러</title>
      <link>http://sangm1n.github.io/problem-solving/boj-17262/</link>
      <pubDate>Sun, 06 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-17262/</guid>
      <description>17262 - 팬덤이 넘쳐흘러 문제 선물 포장 공장을 말아먹은 욱제는 계곡에서 백숙을 파느라 학교에 자주 가지 못한다. 하지만 월클의 인생은 피곤한 법! 욱제는 지금처럼 힘든 시기에도 자신을 기다리는 5조5억명의 열렬한 팬들을 위해 가끔씩 학교에 가 줘야 한다. 욱제는 백숙이 끓는 걸 지켜봐야 해서 가게를 오래 비울 수 없다. 그래서 욱제는 한 번 학교에 간 뒤 최소 시간동안 머물다가 모든 팬들과 한 번씩 인사를 하고 학교를 떠나려고 한다.
욱제는 임의의 시각에 학교에 오거나 학교를 떠날 수 있고, 단 한 번의 왕복만 한다.</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 7570번 줄 세우기</title>
      <link>http://sangm1n.github.io/problem-solving/boj-7570/</link>
      <pubDate>Sun, 06 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-7570/</guid>
      <description>7570 - 줄 세우기 문제 대한 어린이집에 올해 입학한 어린이들이 놀이터에 한 줄로 서있다. 모든 어린이들에게는 입학할 때 주어진 번호가 있고 모두 옷에 번호표를 달고 있다. 그런데 어린이들은 아직 번호 순서대로 줄을 잘 서지 못하므로 선생님이 다음과 같은 방법을 사용해서 번호순서대로 줄을 세우려고 한다.
방법: 줄 서있는 어린이 중 한 명을 선택하여 제일 앞이나 제일 뒤로 보낸다.
위의 방법을 사용할 때 어린이가 이동해서 빈자리가 생기는 경우에는 빈자리의 뒤에 있는 어린이들이 한 걸음씩 앞으로 걸어와서 빈자리를 메꾼다.</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 1920번 수 찾기</title>
      <link>http://sangm1n.github.io/problem-solving/boj-1920/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-1920/</guid>
      <description>1920 - 수 찾기 문제 N개의 정수 A[1], A[2], …, A[N]이 주어져 있을 때, 이 안에 X라는 정수가 존재하는지 알아내는 프로그램을 작성하시오.
코드 한마디 이진탐색&amp;hellip; 😭</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 1929번 소수 구하기</title>
      <link>http://sangm1n.github.io/problem-solving/boj-1929/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-1929/</guid>
      <description>1929 - 소수 구하기 문제 M이상 N이하의 소수를 모두 출력하는 프로그램을 작성하시오.
코드 한마디 여태껏 나는 다음과 같은 방식으로 소수를 판별했다.
count = 0 for i in range(1, N): if N % i == 0: count += 1 if count == 2: print(&amp;#34;Prime number&amp;#34;) 소수란 1과 자기 자신 외의 약수를 가지지 않는 1보다 큰 자연수이기 때문에 반복문을 돌며 나누어 떨어지는지를 검사했다. 학교 수업 때도 동일하게 배웠는데, 저렇게 푸니까 시간초과가 떴다.</description>
    </item>
    
    <item>
      <title>Algorithm - 그래프 탐색을 위한 DFS/BFS</title>
      <link>http://sangm1n.github.io/dfs-bfs-algorithm/</link>
      <pubDate>Thu, 03 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/dfs-bfs-algorithm/</guid>
      <description>탐색은 많은 양의 데이터 중 원하는 데이터를 찾는 과정으로 그래프나 트리 등의 자료구조에서 자주 다룬다. 대표적인 탐색 알고리즘으로 DFS와 BFS가 있고, 이를 확실히 이해하려면 스택과 큐가 뭔지 알아야 한다.
스택과 큐의 핵심 함수는 삽입(push)과 삭제(pop)다. 따라서 항상 오버플로와 언더플로를 고려해야 한다.
 overflow : 저장 공간을 벗어나 데이터가 넘쳐흐르는 상황 underflow : 데이터가 들어 있지 않은 상태에서 삭제 연산을 수행하는 상황  Stack  LIFO (Last In First Out) : 후입선출로 접시를 쌓는 모습을 연상하면 된다.</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 1654번 랜선 자르기</title>
      <link>http://sangm1n.github.io/problem-solving/boj-1654/</link>
      <pubDate>Thu, 03 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-1654/</guid>
      <description>1654 - 랜선 자르기 문제 집에서 시간을 보내던 오영식은 박성원의 부름을 받고 급히 달려왔다. 박성원이 캠프 때 쓸 N개의 랜선을 만들어야 하는데 너무 바빠서 영식이에게 도움을 청했다.
이미 오영식은 자체적으로 K개의 랜선을 가지고 있다. 그러나 K개의 랜선은 길이가 제각각이다. 박성원은 랜선을 모두 N개의 같은 길이의 랜선으로 만들고 싶었기 때문에 K개의 랜선을 잘라서 만들어야 한다. 예를 들어 300cm 짜리 랜선에서 140cm 짜리 랜선을 두 개 잘라내면 20cm는 버려야 한다. (이미 자른 랜선은 붙일 수 없다.</description>
    </item>
    
    <item>
      <title>이코테 - 미로 탈출</title>
      <link>http://sangm1n.github.io/problem-solving/ct-escape-maze/</link>
      <pubDate>Thu, 03 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/ct-escape-maze/</guid>
      <description>미로 탈출 이것이 취업을 위한 코딩 테스트다
문제 N X M 미로에는 여러 마리의 괴물이 있어 이를 피해 탈출해야 한다.
사용자의 위치는 (1, 1)이고 미로의 출구는 (N, M)의 위치에 존재하며 한 번에 한 칸씩 이동할 수 있다.
이때 괴물이 있는 부분은 0으로, 괴물이 없는 부분은 1로 표시되어 있다.
미로는 반드시 탈출할 수 있는 형태로 제시된다. 사용자가 탈출하기 위해 움직여야 하는 최소 칸의 개수를 구하시오.
칸을 셀 때는 반드시 시작 칸과 마지막 칸을 모두 포함해서 계산한다.</description>
    </item>
    
    <item>
      <title>이코테 - 음료수 얼려 먹기</title>
      <link>http://sangm1n.github.io/problem-solving/ct-ice-beverage/</link>
      <pubDate>Thu, 03 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/ct-ice-beverage/</guid>
      <description>음료수 얼려 먹기 이것이 취업을 위한 코딩 테스트다
문제 N X M 크기의 얼음 틀이 있다. 구멍이 뚫려 있는 부분은 0, 칸막이가 존재하는 부분은 1로 표시된다.
구멍이 뚫려 있는 부분끼리 상, 하, 좌, 우로 붙어 있는 경우 서로 연결되어 있는 것으로 간주한다.
이때 얼음 틀의 모양이 주어졌을 때 생성되는 총 아이스크림의 개수를 구하는 프로그램을 작성하시오.
코드 한마디 재귀를 이용한 DFS 알고리즘으로 쉽게 풀 수 있는 문제이다.</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 1018번 체스판 다시 칠하기</title>
      <link>http://sangm1n.github.io/problem-solving/boj-1018/</link>
      <pubDate>Wed, 02 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-1018/</guid>
      <description>1018 - 체스판 다시 칠하기 문제 지민이는 자신의 저택에서 MN개의 단위 정사각형으로 나누어져 있는 M x N 크기의 보드를 찾았다.
어떤 정사각형은 검은색으로 칠해져 있고, 나머지는 흰색으로 칠해져 있다. 지민이는 이 보드를 잘라서 8*8 크기의 체스판으로 만들려고 한다.
체스판은 검은색과 흰색이 번갈아서 칠해져 있어야 한다.
구체적으로, 각 칸이 검은색과 흰색 중 하나로 색칠되어 있고, 변을 공유하는 두 개의 사각형은 다른 색으로 칠해져 있어야 한다.
따라서 이 정의를 따르면 체스판을 색칠하는 경우는 두 가지뿐이다.</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 1436번 영화감독 숌</title>
      <link>http://sangm1n.github.io/problem-solving/boj-1436/</link>
      <pubDate>Wed, 02 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-1436/</guid>
      <description>1436 - 영화감독 숌 문제 666은 종말을 나타내는 숫자라고 한다. 따라서, 많은 블록버스터 영화에서는 666이 들어간 제목을 많이 사용한다. 영화감독 숌은 세상의 종말 이라는 시리즈 영화의 감독이다.
조지 루카스는 스타워즈를 만들 때, 스타워즈 1, 스타워즈 2, 스타워즈 3, 스타워즈 4, 스타워즈 5, 스타워즈 6과 같이 이름을 지었고, 피터 잭슨은 반지의 제왕을 만들 때, 반지의 제왕 1, 반지의 제왕 2, 반지의 제왕 3과 같이 영화 제목을 지었다.
하지만 숌은 자신이 조지 루카스와 피터 잭슨을 뛰어넘는다는 것을 보여주기 위해서 영화 제목을 좀 다르게 만들기로 했다.</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 14659번 한조서열정리하고옴ㅋㅋ</title>
      <link>http://sangm1n.github.io/problem-solving/boj-14659/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-14659/</guid>
      <description>14659 - 한조서열정리하고옴ㅋㅋ 문제 “반갑다. 내 이름은 반고흐#31555! 조선 최고의 활잡이지. 오늘도 난 금강산 위에서 적들을 노리고 있지.
내 앞에 있는 적들이라면 누구도 놓치지 않아! 좋아, 이제 곧 월식이 시작되는군. 월식이 시작되면 용이 적들을 집어삼킬 것이다. 잘 봐두어라! 마장동 활잡이 반고흐#31555님의 실력을-!”
반고흐#31555는 자기 뒤쪽 봉우리에 덩기#3958이 있음을 전혀 모르고 있었다.
덩기#3958도 반고흐#31555와 마찬가지로 월식이 시작되면 용을 불러내어 눈앞에 있는 다른 활잡이들을 모두 처치할 생각이다.
사실, 반고흐#31555와 덩기#3958 뿐만 아니라 금강 산맥의 N개 봉우리에 있는 모든 활잡이들이 같은 생각을 가지고 있다.</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 1758번 알바생 강호</title>
      <link>http://sangm1n.github.io/problem-solving/boj-1758/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-1758/</guid>
      <description>1758 - 알바생 강호 문제 스타박스는 손님을 입장시킬 때 독특한 방법으로 입장시킨다.
스타박스에서는 손님을 8시가 될 때 까지, 문앞에 줄 세워 놓는다. 그리고 8시가 되는 순간 손님들은 모두 입구에서 커피를 하나씩 받고, 자리로 간다. 강호는 입구에서 커피를 하나씩 주는 역할을 한다.
손님들은 입구에 들어갈 때, 강호에게 팁을 준다. 손님들은 자기가 커피를 몇 번째 받는지에 따라 팁을 다른 액수로 강호에게 준다.
각 손님은 강호에게 원래 주려고 생각했던 돈 - (받은 등수 - 1) 만큼의 팁을 강호에게 준다.</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 18238번 ZOAC 2</title>
      <link>http://sangm1n.github.io/problem-solving/boj-18238/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-18238/</guid>
      <description>18238 - ZOAC 2 문제 2019년 12월, 두 번째로 개최된 ZOAC의 오프닝을 맡은 성우는 누구보다 화려하게 ZOAC를 알리려 한다. 작년 ZOAC의 방식은 너무 식상하다고 생각한 성우는 문자열을 보여주는 새로운 규칙을 고안해냈다! 규칙은 이러하다.
 그림과 같은 원판에 문자들이 순서대로 적혀있다. 처음 순간에 화살표는 &amp;lsquo;A&amp;rsquo;를 가리키고 있다. 원판은 왼쪽 또는 오른쪽으로 돌릴 수 있다. 원판을 한 칸 돌리는 데에는 1의 시간이 소요된다. 화살표가 가리키고 있는 문자를 출력할 수 있다. 문자를 출력하는 데에 걸리는 시간은 없다.</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 2812번 크게 만들기</title>
      <link>http://sangm1n.github.io/problem-solving/boj-2812/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-2812/</guid>
      <description>2812 - 크게 만들기 문제 N자리 숫자가 주어졌을 때, 여기서 숫자 K개를 지워서 얻을 수 있는 가장 큰 수를 구하는 프로그램을 작성하시오.
코드 한마디 쉬운 문제일 줄 알았다. K번 반복하면서 최솟값을 삭제해줬는데 시간 초과 의 늪에서 벗어나질 못했다. 구글링 결과 스택처럼 넣고 더 큰 수가 들어온 경우 삭제하는 식으로 풀면 됐다.</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 2847번 게임을 만든 동준이</title>
      <link>http://sangm1n.github.io/problem-solving/boj-2847/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-2847/</guid>
      <description>2847 - 게임을 만든 동준이 문제 학교에서 그래픽스 수업을 들은 동준이는 수업시간에 들은 내용을 바탕으로 스마트폰 게임을 만들었다.
게임에는 총 N개의 레벨이 있고, 각 레벨을 클리어할 때 마다 점수가 주어진다.
플레이어의 점수는 레벨을 클리어하면서 얻은 점수의 합으로, 이 점수를 바탕으로 온라인 순위를 매긴다.
동준이는 레벨을 난이도 순으로 배치했다. 하지만, 실수로 쉬운 레벨이 어려운 레벨보다 점수를 많이 받는 경우를 만들었다.
이 문제를 해결하기 위해 동준이는 특정 레벨의 점수를 감소시키려고 한다. 이렇게해서 각 레벨을 클리어할 때 주는 점수가 증가하게 만들려고 한다.</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 9009번 피보나치</title>
      <link>http://sangm1n.github.io/problem-solving/boj-9009/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-9009/</guid>
      <description>9009 - 피보나치 문제 피보나치 수 ƒK는 ƒK = ƒK-1 + ƒK-2로 정의되며 초기값은 ƒ0 = 0과 ƒ1 = 1 이다. 양의 정수는 하나 혹은 그 이상의 서로 다른 피보나치 수들의 합으로 나타낼 수 있다는 사실은 잘 알려져 있다.
하나의 양의 정수에 대한 피보나치 수들의 합은 여러 가지 형태가 있다.
예를 들어 정수 100은 ƒ4 + ƒ6 + ƒ11 = 3 + 8 + 89 또는 ƒ1 + ƒ3 + ƒ6 + ƒ11 = 1 + 2 + 8 + 89, 또는 ƒ4 + ƒ6 + ƒ9 + ƒ10 = 3 + 8 + 34 + 55 등으로 나타낼 수 있다.</description>
    </item>
    
    <item>
      <title>Algorithm - 아이디어를 코드로 바꾸는 구현</title>
      <link>http://sangm1n.github.io/implementation-algorithm/</link>
      <pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/implementation-algorithm/</guid>
      <description>코딩 테스트에서 어떤 문제를 풀든 코드를 작성하는 과정은 필수기 때문에 구현은 모든 문제 유형을 포함하는 개념이라고 볼 수 있다.
Implementation Algorithm 특히 풀이를 떠올리는 것은 쉽지만 소스코드로 옮기기 어려운 문제 를 구현 유형의 문제라고 본다. 알고리즘은 간단한데 코드가 굉장히 길어지는 문제, 문자열을 입력받아 한 문자 단위로 끊어서 리스트에 넣어야 하는 문제 등이 까다로운 구현 유형의 문제라고 할 수 있다.
저자는 이 책에서 완전 탐색과 시뮬레이션 두 개의 유형을 구현으로 묶었다.</description>
    </item>
    
    <item>
      <title>이코테 - 게임 개발</title>
      <link>http://sangm1n.github.io/problem-solving/ct-game-development/</link>
      <pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/ct-game-development/</guid>
      <description>게임 개발 이것이 취업을 위한 코딩 테스트다
문제 게임 캐릭터가 맵 안에서 움직이는 시스템이 있다.
캐릭터가 있는 장소는 1 X 1 크기의 정사각형으로 이뤄진 N X M 크기의 직사각형으로, 각각의 칸은 육지 또는 바다이다. 캐릭터는 동서남북 중 한 곳을 바라본다.
맵의 각 칸은 (A, B)로 나타낼 수 있고, A는 북쪽으로부터 떨어진 칸의 개수, B는 서쪽으로부터 떨어진 칸의 개수이다.
캐릭터는 상하좌우로 움직일 수 있고, 바다로 되어 있는 공간에는 갈 수 없다. 움직임을 위한 매뉴얼은 다음과 같다.</description>
    </item>
    
    <item>
      <title>이코테 - 왕실의 나이트</title>
      <link>http://sangm1n.github.io/problem-solving/ct-royal-knight/</link>
      <pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/ct-royal-knight/</guid>
      <description>왕실의 나이트 이것이 취업을 위한 코딩 테스트다
문제 왕실 정원은 체스판과 같은 8 X 8 좌표 평면이다. 왕실 정원의 특정한 한 칸에 나이트가 서 있다.
나이트는 말을 타고 있기 때문에 이동을 할 때는 L자 형태로만 이동할 수 있으며 정원 밖으로는 나갈 수 없다.
나이트는 특정한 위치에서 다음과 같은 2가지 경우로 이동할 수 있다.
 수평으로 두 칸 이동한 뒤에 수직으로 한 칸 이동하기 수직으로 두 칸 이동한 뒤에 수평으로 한 칸 이동하기  이처럼 좌표 평면상 나이트의 위치가 주어졌을 때 나이트가 이동할 수 있는 경우의 수를 구하시오.</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 1022번 소용돌이 예쁘게 출력하기</title>
      <link>http://sangm1n.github.io/problem-solving/boj-1022/</link>
      <pubDate>Sun, 29 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-1022/</guid>
      <description>1022 - 소용돌이 예쁘게 출력하기 문제 크기가 무한인 정사각형 모눈종이가 있다. 모눈종이의 각 정사각형은 행과 열의 쌍으로 표현할 수 있다.
이 모눈종이 전체를 양의 정수의 소용돌이 모양으로 채울 것이다. 일단 숫자 1을 0행 0열에 쓴다.
그리고 나서 0행 1열에 숫자 2를 쓴다. 거기서 부터 소용돌이는 반시계 방향으로 시작된다. 다음 숫자는 다음과 같이 채우면 된다.
이 문제는 위와 같이 채운 것을 예쁘게 출력하면 된다. r1, c1, r2, c2가 입력으로 주어진다. r1, c1은 가장 왼쪽 위 칸이고, r2, c2는 가장 오른쪽 아래 칸이다.</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 10994번 별 찍기 19</title>
      <link>http://sangm1n.github.io/problem-solving/boj-10994/</link>
      <pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-10994/</guid>
      <description>10994 - 별 찍기-19 문제 예제를 보고 규칙을 유추한 뒤에 별을 찍어 보세요.
코드 한마디 맨날 삼각형 관련 별 찍기만 하다가 이렇게 특이한 문제를 풀어보니 규칙 찾기 굉장히 힘들었다.</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 10997번 별 찍기 22</title>
      <link>http://sangm1n.github.io/problem-solving/boj-10997/</link>
      <pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-10997/</guid>
      <description>10997 - 별 찍기-22 문제 예제를 보고 규칙을 유추한 뒤에 별을 찍어 보세요.
코드 한마디 이 전에 풀었던 문제에서 힌트를 얻어서 풀 수 있었지 처음 보는 유형이었다면 골치 아팠을 것 같다.</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 1789번 수들의 합</title>
      <link>http://sangm1n.github.io/problem-solving/boj-1789/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-1789/</guid>
      <description>8979 - 수들의 합 문제 서로 다른 N개의 자연수의 합이 S라고 한다. S를 알 때, 자연수 N의 최댓값은 얼마일까?
코드 한마디 입력 받은 S까지 for문 돌리는 코드가 왜 안되는지 아직도 모르겠다. 문제에서 주어진 최대 범위 4,294,967,295까지 돌렸더니 통과하길래 그냥 while문으로 작성했다.</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 8979번 올림픽</title>
      <link>http://sangm1n.github.io/problem-solving/boj-8979/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-8979/</guid>
      <description>8979 - 올림픽 문제 올림픽은 참가에 의의가 있기에 공식적으로는 국가간 순위를 정하지 않는다. 그러나, 많은 사람들이 자신의 국가가 얼마나 잘 하는지에 관심이 많기 때문에 비공식적으로는 국가간 순위를 정하고 있다. 두 나라가 각각 얻은 금, 은, 동메달 수가 주어지면, 보통 다음 규칙을 따라 어느 나라가 더 잘했는지 결정한다.
 금메달 수가 더 많은 나라 금메달 수가 같으면, 은메달 수가 더 많은 나라 금, 은메달 수가 모두 같으면, 동메달 수가 더 많은 나라  각 국가는 1부터 N 사이의 정수로 표현된다.</description>
    </item>
    
    <item>
      <title>BOJ/백준 - 2033번 반올림</title>
      <link>http://sangm1n.github.io/problem-solving/boj-2033/</link>
      <pubDate>Thu, 26 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/problem-solving/boj-2033/</guid>
      <description>2033 - 반올림 문제 정수 N이 주어져 있을 때 이 수가 10보다 크면 일의 자리에서 반올림을 하고, 이 결과가 100보다 크면 다시 10의 자리에서 반올림을 하고, 또 이 수가 1000보다 크면 100의 자리에서 반올림을 하고.. (이하 생략) 이러한 연산을 한 결과를 출력하시오.
코드 한마디 처음엔 round 함수만 사용하면 풀리는 간단한 문제인 줄 알았는데 아니였다.</description>
    </item>
    
    <item>
      <title>Algorithm - 당장 좋은 것만 선택하는 그리디</title>
      <link>http://sangm1n.github.io/greedy-algorithm/</link>
      <pubDate>Sun, 22 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/greedy-algorithm/</guid>
      <description>그리디 알고리즘은 단어 그대로 번역하여 탐욕 알고리즘으로도 소개된다. 탐욕적이라는 말이 무슨 뜻일까?
Greedy Algorithm 그리디 알고리즘에서의 탐욕적이다 라는 말은 현재 상황에서 당장 좋은 것만 고르는 방법을 의미한다. 그래서 어떻게 보면 무식하게 문제를 푸는 방법이라고 볼 수 있다. 단지 매 순간마다 가장 좋아보이는 것을 선택하고, 이 선택이 나중에 어떠한 영향을 미칠지에 대해서는 전혀 고려하지 않는다.
코딩 테스트에서 나오는 그리디 알고리즘 문제들은 타 알고리즘과 비교했을 때 미리 외우고 있지 않아도 풀 수 있을 가능성이 높다고 한다.</description>
    </item>
    
    <item>
      <title>코딩 테스트를 위한 파이썬 라이브러리</title>
      <link>http://sangm1n.github.io/basic-of-python/</link>
      <pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/basic-of-python/</guid>
      <description>소프트 스퀘어드도 끝났겠다 한동안 놓고 있던 알고리즘 공부를 다시 시작해보려고 한다. 두 달 동안 파이썬 자체를 사용하지 않아 빠르게 훑고 지나가는 식으로 정리해봤다. 이전 블로그에 파이썬 알고리즘 인터뷰 책을 참고하여 정리한 적이 있는데, 이번에는 몇 주 전 새로 산 나동빈님의 이것이 취업을 위한 코딩 테스트다 라는 책을 참고했다. 개인적으로 후자가 조금 더 이해하기 수월한 편이었다.
유용한 라이브러리 내장 함수 파이썬에는 굳이 import 명령어를 사용하지 않아도 기본적으로 쓸 수 있는 내장 함수가 있다.</description>
    </item>
    
  </channel>
</rss>
