<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>design-pattern on sangminlog</title>
    <link>http://sangm1n.github.io/tags/design-pattern/</link>
    <description>Recent content in design-pattern on sangminlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://sangm1n.github.io/tags/design-pattern/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>［디자인패턴 / DesignPattern］ Observer pattern</title>
      <link>http://sangm1n.github.io/observer-pattern/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/observer-pattern/</guid>
      <description>Observer Pattern 디자인 원칙  서로 상호작용 하는 객체 사이에서는 가능한 느슨한 결합을 한다.  두 객체가 느슨하게 결합되어 있다 == 상호작용을 하지만 서로에 대해 잘 모른다 즉, 주제(subject)는 옵저버가 특정 인터페이스를 구현한다는 것만 알고 있을 뿐 구상 클래스가 무엇인지, 무슨 일을 하는지 등에 대해서는 알 필요가 없다. 주제와 옵저버는 서로 독립적으로 재사용 가능하며, 어느 하나가 바뀌더라도 서로에게 영향을 미치지 않는다.    패턴 정의 observer pattern에서는 한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체들한테 연락이 가고 자동으로 갱신한다.</description>
    </item>
    
    <item>
      <title>［디자인패턴 / DesignPattern］ Strategy pattern</title>
      <link>http://sangm1n.github.io/strategy-pattern/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/strategy-pattern/</guid>
      <description>최근에 계획한 것처럼 디자인패턴 공부의 필요성을 느껴 책을 다시 펼쳤다. 앞으로 스프링 공부를 시작하기 전까지 자바의 정석 과 Head First Design Patterns 책을 병행해서 공부할 예정이다.
Strategy Pattern 디자인 원칙  애플리케이션에서 달라지는 부분을 찾아 캡슐화한다.  이로써 바뀌지 않는 부분에는 영향을 미치지 않은 채 그 부분만 따로 고치거나 확장할 수 있다.   구현이 아닌 인터페이스에 맞춰서 프로그래밍한다.  Duck 클래스를 예로 들면 자주 바뀌는 행동 을 인터페이스로 표현하고 행동을 구현할 때 이러한 인터페이스를 구현하도록 했다.</description>
    </item>
    
  </channel>
</rss>
