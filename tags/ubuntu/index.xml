<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ubuntu on sangminlog</title>
    <link>http://sangm1n.github.io/tags/ubuntu/</link>
    <description>Recent content in Ubuntu on sangminlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://sangm1n.github.io/tags/ubuntu/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ubuntu - 다중 명령어 정리</title>
      <link>http://sangm1n.github.io/ubuntu-multiple-command/</link>
      <pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/ubuntu-multiple-command/</guid>
      <description>다중 명령어를 정리하는 이유 이번에 서버 구축 과제를 진행하며 다중 명령어를 종종 사용했는데, 어떠한 상황에서 어떠한 구분자를 사용해야하는지 궁금해서 찾아봤다. 이를 잘 활용하면 일련의 작업을 명령어 한 줄로 작성할 수 있어 효율적인 작업 수행이 가능하다.
Semicolon (;)  단순히 앞의 명령어부터 순차적으로 실행 명령어의 성공 여부 고려 X  $ cd sangmin; ls -al Ampersand (&amp;amp;)  앞의 명령어는 백그라운드로 실행 즉시 뒤의 명령어 실행 (앞의 명령어 실행 완료 여부 고려 X)  뒤의 명령어가 즉시 실행되기 때문에 앞의 명령어 결과에 종속되서는 안된다.</description>
    </item>
    
    <item>
      <title>APM 컴파일 설치하기 - PHP</title>
      <link>http://sangm1n.github.io/how-to-install-php/</link>
      <pubDate>Sat, 26 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/how-to-install-php/</guid>
      <description>PHP 7.4.1 컴파일 설치 현재 Ubuntu 18.04위에 Apache 2.4.46과 MySQL 8.0.19까지 컴파일 설치했다. PHP 버전 7.4.1 설치를 마지막으로 우분투 위에 패키지 매니저를 사용하지 않고 APM 컴파일 설치를 완료했다.
의존성 패키지 설치 의존성 패키지까지 모두 컴파일 설치 할 수는 없으니 편하게 apt-get 명령어를 사용해준다.
$ apt-get install libxml2-dev $ apt-get install libjpeg-dev $ apt-get install libpng-dev php 설치 Apache와 MySQL 설치할 때와 동일하게 tar.gz 파일을 다운 받아 압축 해제한다.
$ cd /usr/local/ $ wget https://www.</description>
    </item>
    
    <item>
      <title>APM 컴파일 설치하기 - MySQL</title>
      <link>http://sangm1n.github.io/how-to-install-mysql/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/how-to-install-mysql/</guid>
      <description>MySQL 8.0.19 컴파일 설치 Ubuntu 18.04 위에 Apache 2.4.46 설치를 완료했다. (이전 내용)
MySQL은 버전 8.0.19 를 컴파일 설치했는데 시간이 정말 많이 걸려서 놀랐다. 심지어 도중에 한 번 우분투 복구까지 진행했다. 스냅샷을 찍어 백업시켜둔 과거의 나한테 고마웠다. 덕분에 apt-get upgrade하는데 굉장히 많은 시간이 걸렸지만&amp;hellip;
의존성 패키지 설치 MySQL 공식 문서에 꼭 설치해야 하는 패키지들이 명시되어 있다. apt-get update 후 필요한 패키지들을 설치하면 된다.
MySQL Community Server 8.0.19 설치 Apache 설치할 때와 동일하게 tar.</description>
    </item>
    
    <item>
      <title>APM 컴파일 설치하기 - Apache</title>
      <link>http://sangm1n.github.io/how-to-install-apache/</link>
      <pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/how-to-install-apache/</guid>
      <description>컴파일 설치를 하는 이유 소프트 스퀘어드에서 내준 첫 과제는 서버를 구축하는 것 이다. 단순히 Linux에 Apache / PHP / MySQL (이하 APM) 세 가지만 깔면 된다고 해서 쉬운 과제일 줄 알았는데, package manager를 사용하지 않고 컴파일 설치만을 요구했다. 그렇다면 왜 컴파일 설치를 해야 하는지 알아보도록 하자.
Ubuntu를 예로 들면 apt 혹은 apt-get이라는 패키지 매니저가 있다. 패키지 매니저를 통해 프로그램을 설치하게 되면 OS 종류나 버전에 맞춰 의존성 있는 프로그램들도 같이 설치해준다. 개인적인 목적으로 설치하는 프로그램인 경우에는 패키지 매니저를 이용해 쉽게 설치하면 되나, 회사에서 업무적인 목적으로 설치하는 경우 이것을 막을 수도 있다.</description>
    </item>
    
  </channel>
</rss>
