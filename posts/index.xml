<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on sangminlog</title>
    <link>http://sangm1n.github.io/posts/</link>
    <description>Recent content in Posts on sangminlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 03 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://sangm1n.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>구축한 AWS 서버에 외부 접속하기</title>
      <link>http://sangm1n.github.io/aws-connet/</link>
      <pubDate>Sat, 03 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/aws-connet/</guid>
      <description>Situation 현재 AWS 클라우드 서비스에 서버를 구축해놨다.
   Server Program Back-end Language DBMS (+DB)     Nginx PHP MySQL    chrome 웹 브라우저를 클라이언트라고 생각하고 서버에 외부 접속하는 방법을 알아보겠다.
Nginx 인바운드 규칙에 HTTP를 추가하고 인스턴스의 IP 주소로 들어가면 Welcome to nginx! 문장이 우릴 맞아준다. nginx가 잘 설치된 것은 물론 외부 접속에 성공했다는 것을 의미한다. PHP phpinfo 파일 작성 $ sudo vi /var/www/html/phpinfo.php &amp;lt;?php phpinfo(); ?</description>
    </item>
    
    <item>
      <title>AWS를 이용한 서버 구축</title>
      <link>http://sangm1n.github.io/aws-start/</link>
      <pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/aws-start/</guid>
      <description>AWS ? Amazon Web Services, AWS는 아마존에서 만든 Cloud service로 가상 컴퓨터와 스토리지, 네트워크 인프라 등 다양한 서비스를 제공한다.
클라우드 컴퓨팅은 네트워크 상에서 클라우드 서비스 자원을 빌려 사용하는 것을 뜻하며 세 분류로 나뉜다.
 IaaS : Infrastructure as a Service, 컴퓨터 환경만 빌려 사용
ex) AWS EC2, Google Cloud Platform, Azure Virtual Machines, Naver Cloud Platform PaaS : Platform as a Service, 플랫폼 서비스
ex) AWS Elastic Beanstalk, Windows Azure, Heroku SaaS : Software as a Service, 서비스를 이용할 수 있는 소프트웨어</description>
    </item>
    
    <item>
      <title>Bitnami로 서버 구축하여 외부에서 접속하기</title>
      <link>http://sangm1n.github.io/local-server/</link>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/local-server/</guid>
      <description>Bitnami란 무엇일까? 소프트 스퀘어드 1주차 과제는 Ubuntu 위에 APM을 컴파일 설치해 서버를 구축하는 것이었다. 2주차까지는 반복적으로 서버 구축을 하여 익숙해진다고 들었다.
이번에는 편하게 Bitnami를 이용할 것이다. 위키백과에서 bitnami 를 가상 어플라이언스 및 웹 앱, 개발 스택용 소프트웨어 패키지 및 설치 라이브러리라고 서술한다. 쉽게 말해 복잡한 과정의 어플리케이션 솔루션들을 패키지로 만들어 간단히 설치할 수 있도록 도와주는 프로그램이다. 그 중 웹 서버 구축에 필요한 Bitnami WAMP를 사용할 것이다. WAMP는 Window 환경에 Apache / MySQL / PHP를 한 번에 설치해준다.</description>
    </item>
    
    <item>
      <title>Soft squared - Network란 무엇일까?</title>
      <link>http://sangm1n.github.io/network/</link>
      <pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/network/</guid>
      <description>컴파일 설치와의 작별 소프트 스퀘어드 에서의 1주차 과제는 Linux 위에 APM을 컴파일 설치하여 서버를 구축하는 것이었다. 단순히 apt와 같은 패키지 매니저를 사용했으면 편했겠지만 컴파일 설치가 왜 중요한지, 어떨 때 사용하는지를 알 수 있었고 덕분에 CLI (Command-line interface) 환경에 조금 더 친숙해졌다.
어제 2주차 수업을 들으며 앞으로는 컴파일 설치를 하지 않아도 된다는 나름 희소식을 들었다.
 스타벅스 가서 아메리카노 마실래 뚱딴지 같은 소리로 들릴 수도 있지만 2주차 Network 수업은 위의 문장으로 시작됐다.</description>
    </item>
    
    <item>
      <title>Ubuntu - 다중 명령어 정리</title>
      <link>http://sangm1n.github.io/ubuntu-command/</link>
      <pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/ubuntu-command/</guid>
      <description>다중 명령어를 정리하는 이유 이번에 서버 구축 과제를 진행하며 다중 명령어를 종종 사용했는데, 어떠한 상황에서 어떠한 구분자를 사용해야하는지 궁금해서 찾아봤다. 이를 잘 활용하면 일련의 작업을 명령어 한 줄로 작성할 수 있어 효율적인 작업 수행이 가능하다.
Semicolon (;)  단순히 앞의 명령어부터 순차적으로 실행 명령어의 성공 여부 고려 X  $ cd sangmin; ls -al Ampersand (&amp;amp;)  앞의 명령어는 백그라운드로 실행 즉시 뒤의 명령어 실행 (앞의 명령어 실행 완료 여부 고려 X)  뒤의 명령어가 즉시 실행되기 때문에 앞의 명령어 결과에 종속되서는 안된다.</description>
    </item>
    
    <item>
      <title>APM 컴파일 설치하기 - PHP</title>
      <link>http://sangm1n.github.io/php-install/</link>
      <pubDate>Sat, 26 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/php-install/</guid>
      <description>PHP 7.4.1 컴파일 설치 현재 Ubuntu 18.04위에 Apache 2.4.46과 MySQL 8.0.19까지 컴파일 설치했다. PHP 버전 7.4.1 설치를 마지막으로 우분투 위에 패키지 매니저를 사용하지 않고 APM 컴파일 설치를 완료했다.
의존성 패키지 설치 의존성 패키지까지 모두 컴파일 설치 할 수는 없으니 편하게 apt-get 명령어를 사용해준다.
$ apt-get install libxml2-dev $ apt-get install libjpeg-dev $ apt-get install libpng-dev php 설치 Apache와 MySQL 설치할 때와 동일하게 tar.gz 파일을 다운 받아 압축 해제한다.
$ cd /usr/local/ $ wget https://www.</description>
    </item>
    
    <item>
      <title>APM 컴파일 설치하기 - MySQL</title>
      <link>http://sangm1n.github.io/mysql-install/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/mysql-install/</guid>
      <description>MySQL 8.0.19 컴파일 설치 Ubuntu 18.04 위에 Apache 2.4.46 설치를 완료했다. (이전 내용)
MySQL은 버전 8.0.19 를 컴파일 설치했는데 시간이 정말 많이 걸려서 놀랐다. 심지어 도중에 한 번 우분투 복구까지 진행했다. 스냅샷을 찍어 백업시켜둔 과거의 나한테 고마웠다. 덕분에 apt-get upgrade하는데 굉장히 많은 시간이 걸렸지만&amp;hellip;
의존성 패키지 설치 MySQL 공식 문서에 꼭 설치해야 하는 패키지들이 명시되어 있다. apt-get update 후 필요한 패키지들을 설치하면 된다.
MySQL Community Server 8.0.19 설치 Apache 설치할 때와 동일하게 tar.</description>
    </item>
    
    <item>
      <title>APM 컴파일 설치하기 - Apache</title>
      <link>http://sangm1n.github.io/apache-install/</link>
      <pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/apache-install/</guid>
      <description>컴파일 설치를 하는 이유 소프트 스퀘어드에서 내준 첫 과제는 서버를 구축하는 것 이다. 단순히 Linux에 Apache / PHP / MySQL (이하 APM) 세 가지만 깔면 된다고 해서 쉬운 과제일 줄 알았는데, package manager를 사용하지 않고 컴파일 설치만을 요구했다. 그렇다면 왜 컴파일 설치를 해야 하는지 알아보도록 하자.
Ubuntu를 예로 들면 apt 혹은 apt-get이라는 패키지 매니저가 있다. 패키지 매니저를 통해 프로그램을 설치하게 되면 OS 종류나 버전에 맞춰 의존성 있는 프로그램들도 같이 설치해준다. 개인적인 목적으로 설치하는 프로그램인 경우에는 패키지 매니저를 이용해 쉽게 설치하면 되나, 회사에서 업무적인 목적으로 설치하는 경우 이것을 막을 수도 있다.</description>
    </item>
    
    <item>
      <title>Soft squared - Server란 무엇일까?</title>
      <link>http://sangm1n.github.io/server-intro/</link>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/server-intro/</guid>
      <description>Soft squared를 시작하며 드디어 오늘 Soft squared 서버반 첫 수업을 시작했다. 예전부터 막연하게 백엔드 공부를 해보고 싶었다. 혼자 책보며 공부하는 것보다는 배우면서 실습도 해볼 수 있는 프로그램이 있나 찾아보다가 소프트 스퀘어드를 알게 되었다. 막학기 개강과 동시에 소프트 스퀘어드 서버반 등록을 했고 방금 막 첫 수업을 듣고 왔다.
 그래서 서버가 뭔데? 네트워크와 같은 과목을 공부하다 보면 위의 사진을 쉽게 접했을 것이다. 사진을 보면 client가 서버에 요청을 하고 server는 요청에 해당하는 작업을 수행해서 응답하는 모습을 보인다.</description>
    </item>
    
    <item>
      <title>Hugo와 Github pages를 이용한 새 블로그 시작</title>
      <link>http://sangm1n.github.io/new-blog/</link>
      <pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/new-blog/</guid>
      <description>블로그를 옮긴 이유 기존에 나는 Gatsby 기반의 블로그를 Netlify로 배포해서 운영하고 있었다. 블로그를 옮겨야겠다고 마음 먹은 이유는 바로 테마였다. 정확히 말하자면 markdown 테마이다. 블로그 전체적인 테마는 심플해서 마음에 들었는데, markdown 형식으로 글을 쓸 경우 뭔가 밋밋했다. 또한 기존 블로그는 간단하게 TIL만 작성하는 등 최소한의 시간만 투자했었다. 하지만 기술 블로그의 의미를 조금 더 찾고자 새로운 블로그를 만들기로 결심했다.
 Jekyll vs Hexo vs Hugo 정적 웹사이트 생성기는 굉장히 많다. 그 중 사람들이 가장 많이 사용하는 세 가지를 비교하여 결정했다.</description>
    </item>
    
  </channel>
</rss>
