<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TIL on sangminlog</title>
    <link>http://sangm1n.github.io/categories/til/</link>
    <description>Recent content in TIL on sangminlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 19 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://sangm1n.github.io/categories/til/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TIL - 2020년 12월 19일</title>
      <link>http://sangm1n.github.io/til/2020-12/2020-12-19/</link>
      <pubDate>Sat, 19 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-12/2020-12-19/</guid>
      <description>💪 Today I Learned BOJ  7490번 0 만들기  바로 DP로 접근했는데 어지간히 안풀렸다. 대다수 사람들이 재귀로 풀던데, 재귀에 대한 감이 아직 안잡혀서 큰일이다.    이것이 취업을 위한 코딩테스트다  팀 결성 도시 분할 계획 커리큘럼  Graph Algorithm  포스팅 대체  🏃 한마디 따로 토이 프로젝트를 하나 해야할 것 같은 기분이 든다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 12월 17일</title>
      <link>http://sangm1n.github.io/til/2020-12/2020-12-17/</link>
      <pubDate>Thu, 17 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-12/2020-12-17/</guid>
      <description>💪 Today I Learned 이것이 취업을 위한 코딩테스트다  미래 도시 전보  Shortest Path Algorithm   Dijkstra algorithm
 특정한 노드에서 출발하여 다른 노드로 가는 각각의 최단 경로를 구하는 알고리즘 우선순위 큐를 이용한 구현    Floyd-Warshall algorithm
 모든 노드에 대하여 다른 모든 노드로 가는 최단 경로를 구하는 알고리즘 2차원 배열을 이용한 구현    🏃 한마디 따로 토이 프로젝트를 하나 해야할 것 같은 기분이 든다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 12월 15일</title>
      <link>http://sangm1n.github.io/til/2020-12/2020-12-15/</link>
      <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-12/2020-12-15/</guid>
      <description>💪 Today I Learned BOJ  1541번 잃어버린 괄호  이것이 취업을 위한 코딩테스트다  1로 만들기 개미 전사 바닥 공사 효율적인 화폐 구성  Dynamic Programming 큰 문제를 작게 나누고, 같은 문제라면 한 번씩만 풀어 문제를 효율적으로 해결하는 알고리즘
 Top-down  memoization 기법 한 번 구한 결과를 메모리 공간에 저장해두고, 같은 식을 다시 호출할 때 저장해둔 결과를 그대로 가져온다.   Bottom-up  DP-table 사용 작은 문제부터 답을 도출해나간다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 12월 14일</title>
      <link>http://sangm1n.github.io/til/2020-12/2020-12-14/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-12/2020-12-14/</guid>
      <description>💪 Today I Learned 이것이 취업을 위한 코딩테스트다  부품 찾기 떡볶이 떡 만들기  Search 리스트에 담긴 데이터를 확인하는 알고리즘
 Sequential Search  특정한 데이터를 찾기 위해 리스트 맨 앞에서부터 하나씩 확인하는 방법 시간복잡도 O(N)   Binary Search  정렬된 데이터의 탐색 범위를 반씩 좁혀가며 확인하는 방법 시간복잡도 O(logN)    🏃 한마디 백준을 풀면서 봤던 문제와 비슷한 문제들이 이코테 책에 자주 나온다. 책을 미리 읽고 풀었다면 더 수월했을 것 같다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 12월 12일</title>
      <link>http://sangm1n.github.io/til/2020-12/2020-12-12/</link>
      <pubDate>Sat, 12 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-12/2020-12-12/</guid>
      <description>💪 Today I Learned BOJ  1012번 유기농 배추 1074번 Z 1107번 리모컨 1260번 DFS와 BFS 1389번 케빈 베이컨의 6단계 법칙  R 데이터 분석 과제  3개년도 (2015 ~ 2017) 지역별 범죄 발생률 분석   연구실에 있을 때 같은 데이터로 연습했던 적이 있다. 마침 마지막 과제가 공공 데이터를 사용하는 것이었기 때문에 보완해서 제출했다.
🏃 한마디 교양 과제를 끝으로 드디어 종강했다. 내일은 쉬엄쉬엄 하고 다시 월요일부터 새로운 공부 해야겠다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 12월 11일</title>
      <link>http://sangm1n.github.io/til/2020-12/2020-12-11/</link>
      <pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-12/2020-12-11/</guid>
      <description>💪 Today I Learned BOJ  1012번 유기농 배추 1074번 Z 1260번 DFS와 BFS 1389번 케빈 베이컨의 6단계 법칙  🏃 한마디 딥러닝 기말고사 대체 과제 끝 !</description>
    </item>
    
    <item>
      <title>TIL - 2020년 12월 10일</title>
      <link>http://sangm1n.github.io/til/2020-12/2020-12-10/</link>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-12/2020-12-10/</guid>
      <description>💪 Today I Learned BOJ  1003번 피보나치 함수 10814번 나이순 정렬 10816번 숫자 카드 2 10828번 스택 10845번 큐 10866번 덱 10989번 수 정렬하기 3 11650번 좌표 정렬하기 11651번 좌표 정렬하기 2 11866번 요세푸스 문제 0 15829번 Hashing 18111번 마인크래프트 CLASS 레벨 2 클리어 😄  🏃 한마디 완전히 종강할 때까지 레벨 3은 조금씩만 풀어야겠다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 12월 9일</title>
      <link>http://sangm1n.github.io/til/2020-12/2020-12-09/</link>
      <pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-12/2020-12-09/</guid>
      <description>💪 Today I Learned BOJ  2839번 설탕 배달 2869번 달팽이는 올라가고 싶다 4153번 직각삼각형 7568번 덩치 9012번 괄호 10250번 ACM 호텔 10773번 제로  딥러닝 이미지 분류 SW 과제  SW 개발 완료   🏃 한마디 내일은 후딱 보고서 쓰고, 몇 문제 남지 않은 solved.ac 레벨 2를 마무리 할 예정이다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 12월 8일</title>
      <link>http://sangm1n.github.io/til/2020-12/2020-12-08/</link>
      <pubDate>Tue, 08 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-12/2020-12-08/</guid>
      <description>💪 Today I Learned BOJ  1978번 소수 찾기 2108번 통계학 2231번 카드2 2292번 분해합 2609번 벌집 2751번 최대공약수와 최소공배수 2775번 수 정렬하기 2 2798번 블랙잭 8980번 배달  자바의 정석   Chapter 6. 객체지향 프로그래밍 I
오버로딩 생성자 변수의 초기화    🏃 한마디 어쩌다보니 하루종일 알고리즘 문제만 풀었다. 분명 딱 한 문제만 더 풀고 다른 공부 하려고 했는데&amp;hellip;</description>
    </item>
    
    <item>
      <title>TIL - 2020년 12월 6일</title>
      <link>http://sangm1n.github.io/til/2020-12/2020-12-06/</link>
      <pubDate>Sun, 06 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-12/2020-12-06/</guid>
      <description>💪 Today I Learned BOJ  2164번 카드 2 2805번 나무 자르기 7570번 줄 세우기 11497번 통나무 건너뛰기 13305번 주유소 14754번 Pizza Boxes 17262번 팬덤이 넘쳐흘러  🏃 한마디 역시 시험 기간에는 다른 게 더 재밌다. 평소에는 하기 싫던 알고리즘에 자꾸 손이 간다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 12월 5일</title>
      <link>http://sangm1n.github.io/til/2020-12/2020-12-05/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-12/2020-12-05/</guid>
      <description>💪 Today I Learned BOJ  1920_수 찾기 1929_소수 구하기 15904_UCPC는 무엇의 약자일까? 2810_컵홀더  영상정보처리 과제  Function   convert_url_to_image
 urllib.request 라이브러리 이용 url 이미지를 cv2에서 사용할 수 있도록 변형    hex_to_RGB
 16진수 색상 코드 입력 입력된 코드 RGB 값으로 변환    backprojection
 histogram backprojection      한학기동안 배웠던 내용 중 흥미로웠던 토픽에 대해 목표를 제시하고 그것을 코딩하는 과제였다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 12월 4일</title>
      <link>http://sangm1n.github.io/til/2020-12/2020-12-04/</link>
      <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-12/2020-12-04/</guid>
      <description>💪 Today I Learned 딥러닝 이미지 분류 SW 과제   과제 내용
 이미지 파일 업로드 시 CIFAR-10 레이블 중 하나를 예측하여 보여주는 SW 전이학습을 이용하여 예측 모델을 만들고 CIFAR-10 으로 학습 아래와 같은 형태의 UI     진행 상황
 pyqt5를 이용한 GUI 개발     불러온 사진을 배열로 변경할 때 값이 제대로 안들어가는건지 예측을 제멋대로 한다;; 그래도 GUI는 얼추 만들어 놨으니 월요일 다른 과목 시험 끝낸 후에 다시 예측 모델을 만들어야겠다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 12월 3일</title>
      <link>http://sangm1n.github.io/til/2020-12/2020-12-03/</link>
      <pubDate>Thu, 03 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-12/2020-12-03/</guid>
      <description>💪 Today I Learned 이것이 취업을 위한 코딩테스트다  음료수 얼려 먹기 미로 탈출  DFS / BFS  DFS : 깊이 우선 탐색, 스택 및 재귀 함수로 구현 BFS : 너비 우선 탐색, 큐로 구현  🏃 한마디 월요일에 영상정보처리 기말고사다. 아무리 비대면 시험이라지만 슬슬 준비할 때가 된 것 같다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 12월 2일</title>
      <link>http://sangm1n.github.io/til/2020-12/2020-12-02/</link>
      <pubDate>Wed, 02 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-12/2020-12-02/</guid>
      <description>💪 Today I Learned BOJ  1018_체스판 다시 칠하기 CLASS 레벨 1 클리어  레벨 1은 진짜 무난무난했다.
자바의 정석   Chapter 6. 객체지향 프로그래밍 I
 객체지향언어 클래스와 객체 변수와 메서드    책 읽으면서 예제까지 따라 치다보니 시간이 꽤 오래 걸린다. 하루에 한 챕터를 다 볼 수 있을줄 알았는데 알고리즘까지 같이 하다보니 생각보다 진도가 더디다. 더딘만큼 꼼꼼하게 봐야겠다.
🏃 한마디 자바의 정석 책 내용이 굉장히 좋은 것 같다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 12월 1일</title>
      <link>http://sangm1n.github.io/til/2020-12/2020-12-01/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-12/2020-12-01/</guid>
      <description>💪 Today I Learned 알고파 스터디  18238_ZOAC 2 14659_한조서열정리하고옴ㅋㅋ 2847_게임을 만든 동준이 1758_알바생 강호 9009_피보나치 2812_크게 만들기  CodeUp 기초 100제 자바로 84번까지 풀었다. 이 정도면 자바의 정석 5장(배열) 부분까지는 커버 가능할 것 같다. 그러므로 내일부터 OOP 공부해야지.
백준 그룹 생성 현재 스터디하고 있는 것과 별개로 친구와 백준에 그룹을 하나 만들었다. 코테를 붙지 못하면 아무 의미가 없기 때문에 상반기 이력서 돌릴 때까지는 최대한 꾸준히 해야겠다고 느꼈다. 문제들은 solved.ac에 이미 나뉘어져 있는 것을 참고했다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 11월 30일</title>
      <link>http://sangm1n.github.io/til/2020-11/2020-11-30/</link>
      <pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-11/2020-11-30/</guid>
      <description>💪 Today I Learned BOJ  1022_소용돌이 예쁘게 출력하기  이것이 취업을 위한 코딩테스트다  왕실의 나이트 게임 개발  CodeUp 기초 100제 알고리즘 처음 공부할 때 코드업 사이트에 있는 기초 100제를 70번대 정도까지 풀었었다. 초반에 문법 익히기에는 이만한 게 없다고 생각해서 자바로 다시 풀어볼 생각이다. 오늘 48번까지 풀었으니 아무리 오래걸려도 모레면 끝날 것 같다.
🏃 한마디 얼른 자바랑 디자인패턴 공부 끝내고 스프링 시작하고 싶다. 오늘 TOPCIT 점수 나왔는데 아쉽게 400점을 넘기지 못했다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 11월 28일</title>
      <link>http://sangm1n.github.io/til/2020-11/2020-11-28/</link>
      <pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-11/2020-11-28/</guid>
      <description>💪 Today I Learned 자바의 정석 자바 기본서가 한 권쯤은 있어야 한다고 생각해서 구매했다. 5장까지 단순한 문법 파트는 최대한 빨리 읽고, 6장부터 꼼꼼하게 공부하려고 한다. 워낙 OOP 쪽 지식이 얕기 때문에&amp;hellip;
BOJ  10994_별 찍기_19 10997_별 찍기_22  🏃 한마디 오늘 푼 별 찍기 문제는 꽤 어려웠다. 그래도 10994번 문제를 풀고나니 어느 정도 감이 잡혔다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 11월 27일</title>
      <link>http://sangm1n.github.io/til/2020-11/2020-11-27/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-11/2020-11-27/</guid>
      <description>💪 Today I Learned Design Pattern  Observer pattern  한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체들한테 연락이 가고 자동으로 갱신한다. 따라서 일련의 객체들 사이에서 일대다 관계를 정의한다.    BOJ  2033_반올림 8979_올림픽 1789_수들의 합  🏃 한마디 블로그에 PS(Problem Solving) 카테고리를 따로 만들었다. 알고리즘 스터디에 들어간 이상 자주 풀 수 밖에 없고 블로그에 모두 올리면 다른 글들이 묻힐 것이라 판단했다. 풀면서 느낀점이나 어려웠던 부분을 간단하게 짚고 갈 생각이다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 11월 24일</title>
      <link>http://sangm1n.github.io/til/2020-11/2020-11-24/</link>
      <pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-11/2020-11-24/</guid>
      <description>💪 Today I Learned 백준 문제풀이  알고파 시작  소프트 스퀘어드 수료생 대상으로 알고리즘 스터디가 만들어져있길래 가입했다. 지금까지 정식적으로 코테 준비를 해본 경험이 없기에, 그리고 혼자 하는 것보다 같이 스터디 함으로써 부여되는 강제성이 나에게 꼭 필요하다고 생각했다.
🏃 한마디 스터디장이 골라온 문제를 시간 재고 풀었는데 다 풀지 못했다. 9문제 전부 브론즈였기 때문에 어려웠다기보다는 시간이 부족했다. 꾸준히 스터디하면 문제 풀이 속도도 향상되지 않을까 싶다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 11월 23일</title>
      <link>http://sangm1n.github.io/til/2020-11/2020-11-23/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-11/2020-11-23/</guid>
      <description>💪 Today I Learned Design Pattern  Strategy pattern  알고리즘군을 정의하고 각각을 캡슐화하여 교환해서 사용할 수 있도록 만든다. 고로 클라이언트와는 독립적으로 알고리즘을 변경할 수 있다.    Abstract Class vs Interface 추상 클래스와 인터페이스의 공통점은
  Abstract Class
 클래스 내 0개 이상의 추상 메소드를 갖거나 abstract로 정의된 경우 추상 클래스를 상속 받아 그 기능을 이용하고 확장 다중 상속 불가능    Interface
 모든 메소드가 추상 메소드인 경우 함수의 구현을 강제하기 위해 틀만 존재 다중 상속 가능    🏃 한마디 친구가 추상 클래스와 인터페이스의 차이점을 물어봤는데 바로 대답이 안나오고 우물쭈물거렸다.</description>
    </item>
    
    <item>
      <title>Plan - 2020년 11월 21일</title>
      <link>http://sangm1n.github.io/til/2020-11/2020-11-21/</link>
      <pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-11/2020-11-21/</guid>
      <description>어제 소프트 스퀘어드 10기 수료식이 끝나고 오늘 아침에 싸피 SW적성진단까지 마쳤다. 해오던 것들이 끝나 한동안 붕 뜰까봐 앞으로의 계획을 짜봤다.
Algorithm 두 달 이상 안했으니 말 다했다. 코테 준비는 틈틈이 하는 게 맞는데 그게 참 어렵다. 이번에는 진득하게 했으면 좋겠다 제발. 🙏
Design Pattern ICT 인턴 면접 때 디자인 패턴에 관한 질문이 들어왔을 때 대답을 시원찮게 하기도 했고, 개발 공부할수록 필요성을 더더욱 느낀다. 사실 스프링 공부 하기 전에 자바를 손에 익힐 겸 할 생각이다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 11월 19일</title>
      <link>http://sangm1n.github.io/til/2020-11/2020-11-18/</link>
      <pubDate>Thu, 19 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-11/2020-11-18/</guid>
      <description>💪 Today I Learned   SSAFY 공부
  소프트 스퀘어드 수료식 발표 PPT 제작
  로그인 인증 관련 포스팅
  🏃 한마디 요즘 싸피 준비한다고 TIL을 쓰는둥 마는둥해서 아예 주말부터 다시 써야겠다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 11월 17일</title>
      <link>http://sangm1n.github.io/til/2020-11/2020-11-17/</link>
      <pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-11/2020-11-17/</guid>
      <description>💪 Today I Learned Deep Learning   mnist DNN architecture   define model
model = Sequential() model.add(Flatten(input_shape=(28, 28))) model.add(Dense(128, activation=&amp;#39;relu&amp;#39;)) model.add(Dropout(rate=0.4)) model.add(Dense(64, activation=&amp;#39;relu&amp;#39;)) model.add(Dense(32, activation=&amp;#39;relu&amp;#39;)) model.add(Dense(10, activation=&amp;#39;softmax&amp;#39;))   compile model
adam = optimizers.adam(lr=learning_rate) model.compile(loss=&amp;#39;categorical_crossentropy&amp;#39;, optimizer=adam, metrics=[&amp;#39;accuracy&amp;#39;])   🏃 한마디 11주차 딥러닝 과제 끝.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 11월 16일</title>
      <link>http://sangm1n.github.io/til/2020-11/2020-11-16/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-11/2020-11-16/</guid>
      <description>💪 Today I Learned Deep Learning   Neural network에서 과적합을 방지하는 방법
 Drop out : 연결된 노드 몇 개 삭제. 즉, 가중치를 없애 학습이 잘 안되도록 방해 Weight decay : 가중치 갱신 시 0과 1 사이 임의의 값을 곱해 갱신    DNN back propagation 시 발생하는 문제
 Vanishing gradient : 역전파할수록 도함수(기울기) 값이 줄어들기 때문에 에러가 앞쪽으로 전달되지 않는 현상 ReLU 등의 성능 좋은 활성화 함수 선택 필요    Momentum</description>
    </item>
    
    <item>
      <title>TIL - 2020년 11월 13일</title>
      <link>http://sangm1n.github.io/til/2020-11/2020-11-13/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-11/2020-11-13/</guid>
      <description>💪 Today I Learned 집꾸미기 어플 서버 클론 종료 50개 조금 안되는 API를 만드는 것을 끝으로 2주간의 모의 외주 프로젝트가 종료되었다. 최종본으로 제출한 ERD는 아래 사진과 같다. 처음에 만들어두고 수정하는 것을 최대한 지양하려 했지만 데이터를 넣으며 끝도 없이 수정했다.
🏃 한마디 두 달 간의 소프트 스퀘어드 서버 교육 과정이 끝났다. 모의 외주를 진행하는 2주는 특히나 힘들었다. 월요일에 수료 결과를 알려준다 했으니 주말 동안 푹 쉬어야겠다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 11월 12일</title>
      <link>http://sangm1n.github.io/til/2020-11/2020-11-12/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-11/2020-11-12/</guid>
      <description>💪 Today I Learned 집꾸미기 어플 서버 클론  API 작성  마이페이지 보관함 API  전체 / 보관함 각각 다르게 구성 timestampdiff 이용하여 날짜 차이 구한 뒤 date_format 적용   검색 결과로 뜨는 세 가지 탭  스토어 / 매거진 / 사진 필터링 미구현     기타  클라이언트가 화질 저하되서 뜬다는 부분 사진 수정    🏃 한마디 드디어 내일 2주간의 모의 외주 프로젝트가 끝난다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 11월 11일</title>
      <link>http://sangm1n.github.io/til/2020-11/2020-11-11/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-11/2020-11-11/</guid>
      <description>💪 Today I Learned 집꾸미기 어플 서버 클론  API 작성  transaction  집소개 게시글 조회 / 최근 본 컨텐츠 목록 삽입 / 조회수 +1 상품 조회 / 최근 본 상품 목록 삽입 / 조회수 +1 공간 게시글 조회 / 조회수 +1   상품 평점 및 후기 관련 API 최근 검색어 및 인기 검색어 조회 API    🏃 한마디 트랜잭션이 필요하다고 생각되는 부분들 모두 처리해줬다. 다중쿼리를 어떻게 적용시킬지 검색해 본 결과 craetePool에 multipleStatements 옵션을 true로만 설정해주면 됐다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 11월 10일</title>
      <link>http://sangm1n.github.io/til/2020-11/2020-11-10/</link>
      <pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-11/2020-11-10/</guid>
      <description>💪 Today I Learned 집꾸미기 어플 서버 클론  API 작성  공간 관련 API 마무리 transaction  회원가입 기본 보관함 2개 생성 (매거진 / 가구 &amp;amp; 소품)   보관함 생성 및 삭제 API    🏃 한마디 포스트맨으로 계속 확인하면서 작업중인데 내가 만든 API가 잘 동작한다는 것이 신기할 따름이다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 11월 9일</title>
      <link>http://sangm1n.github.io/til/2020-11/2020-11-09/</link>
      <pubDate>Mon, 09 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-11/2020-11-09/</guid>
      <description>💪 Today I Learned Feedback  최종까지 transaction 꼭 구현하기 데이터 구축  상품 / 집소개 소량의 데이터 입력 R 활용하여 약 2,000개 복제  데이터 프레임으로 생성하여 엑셀 파일로 저장 RDS에 삽입      🏃 한마디 더미 데이터를 어떻게 대량 넣을까 고민하다가 예전에 자주 사용한 R을 활용했다. 확실히 안써버릇 하니까 문법이 잘 기억 안나더라.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 11월 8일</title>
      <link>http://sangm1n.github.io/til/2020-11/2020-11-08/</link>
      <pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-11/2020-11-08/</guid>
      <description>💪 Today I Learned 집꾸미기 어플 서버 클론  API 작성  집소개 관련 API  전체 집소개 리스트 / 집소개 수 / 집소개 게시글 조회   공간 관련 API  전체 공간 리스트 / 공간 수      🏃 한마디 너무 GET 방식 위주의 API만 작성하는 게 아닌가 싶다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 11월 7일</title>
      <link>http://sangm1n.github.io/til/2020-11/2020-11-07/</link>
      <pubDate>Sat, 07 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-11/2020-11-07/</guid>
      <description>💪 Today I Learned 집꾸미기 어플 서버 클론  API 작성  신상품 조회 API 실시간 랭킹 조회 API  pagination으로 구현하여 메인 화면에서도 쓸 수 있도록 구현   추천상품 탭 관련 API  탭 목록에 있는 게시글 게시글 눌렀을 때 보여지는 여러 상품들      🏃 한마디 코딩테스트는 역시 어렵다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 11월 6일</title>
      <link>http://sangm1n.github.io/til/2020-11/2020-11-06/</link>
      <pubDate>Fri, 06 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-11/2020-11-06/</guid>
      <description>💪 Today I Learned 집꾸미기 어플 서버 클론   API 작성
 브랜드 조회 API  querystring으로 필터링 처리   상품 조회 API  하나의 API로 최대한 많이 처리하도록 구현      ERD 수정
 Aquerytool / passwd : 4200dv    🏃 한마디 조급하다. 내일은 우아한테크코스 코딩테스트 때문에 4시간을 비워야 하는데&amp;hellip;</description>
    </item>
    
    <item>
      <title>TIL - 2020년 11월 5일</title>
      <link>http://sangm1n.github.io/til/2020-11/2020-11-05/</link>
      <pubDate>Thu, 05 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-11/2020-11-05/</guid>
      <description>💪 Today I Learned 집꾸미기 어플 서버 클론  API 작성  전체 상품 조회 API  filtering / pagination   상품 수 조회 API  filtering   카테고리 목록 조회 API  reference 값 부여 소분류 -&amp;gt; 중분류 -&amp;gt; 대분류 순서대로 참조할 수 있도록      🏃 한마디 API 하나 작성하는 데 굉장히 오랜 시간을 투자했다. 쿼리 하나에서 모든 필터링 옵션을 처리하고 싶어서 조건이 querystring으로 들어오면 필터별로 모두 다르게 처리해줬다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 11월 4일</title>
      <link>http://sangm1n.github.io/til/2020-11/2020-11-04/</link>
      <pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-11/2020-11-04/</guid>
      <description>💪 Today I Learned 집꾸미기 어플 서버 클론  ERD 설계   Aquerytool / passwd : 4200dv 주문 테이블을 비롯한 집소개, 공간 테이블 구현  피드백 받았던 내용 최대한 반영   개발용 스키마에 더미 데이터 삽입 (by procedure)  테이블 당 500 ~ 2000개 추후에 구현하는 장바구니, 보관함 등의 테이블은 제외    🏃 한마디 하루종일 투자해서 ERD를 갈아엎었다. 부디 더 수정하는 일이 없길&amp;hellip;</description>
    </item>
    
    <item>
      <title>TIL - 2020년 11월 3일</title>
      <link>http://sangm1n.github.io/til/2020-11/2020-11-03/</link>
      <pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-11/2020-11-03/</guid>
      <description>💪 Today I Learned Feedback  ERD 설계  User 테이블에 특정 사용자에 대한 권한 부여  Staff 테이블 대체   HouseIntro와 관련 있는 Tag 테이블들 합치기  status로 구분   주문 관련 테이블 구성하기 ERD 설계 완료 (~ 11/4)   기타  pm2로 NODE_ENV 설정 Dao 파일에서 DB connection에 대한 try-catch문 이용    🏃 한마디 ERD를 내일까지 다 설계할 수 있을까 의문이다. 그리고 집꾸미기 어플 내에 기능들이 너무 많아 2주간 완벽하게 클론 코딩 하기에는 무리라 생각해서 조금 축소했다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 11월 2일</title>
      <link>http://sangm1n.github.io/til/2020-11/2020-11-02/</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-11/2020-11-02/</guid>
      <description>💪 Today I Learned 집꾸미기 어플 서버 클론  ERD 설계  Product 및 HouseIntro 관련 테이블 생성 Aquerytool / passwd : 7b2r3p   API 작성  회원가입 및 로그인 API 클라이언트 테스트 완료 (prod) 프로필 조회 및 수정, 회원탈퇴 API 작성 (dev) 닉네임 중복검사 및 프로필 이미지 수정 API 작성 (dev)    🏃 한마디 상품 관련 ERD 설계를 하고 더미 데이터를 넣어봤는데 실제 배포용 데이터베이스에 어떻게 다 넣을지 막막하다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 11월 1일</title>
      <link>http://sangm1n.github.io/til/2020-11/2020-11-01/</link>
      <pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-11/2020-11-01/</guid>
      <description>💪 Today I Learned 집꾸미기 어플 서버 클론  서브 도메인 각각 ssh 적용 (by Certbot) 회원가입 및 로그인 API 구현 (dev)  User 테이블만 생성 후 적용 validation 최대한 어플과 유사하게    Product 관련 DB ERD 설계 상품과 사용자 관련 ERD만 설계했는데 테이블이 너무 많이 만들어진거 아닌가 싶다.
🏃 한마디 reverse proxy 때문에 ssh 적용하는 데 꽤나 애먹었다. URL 뒤에 포트 번호가 붙어있어서 그런지 계속 https 적용이 안됐다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 31일</title>
      <link>http://sangm1n.github.io/til/2020-10/2020-10-31/</link>
      <pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10/2020-10-31/</guid>
      <description>💪 Today I Learned 집꾸미기 클론 코딩 시작  EC2 서버 구축  OS : ubuntu 18.04 Web server : nginx 1.14.0 Back-end language : node 14.15.0 Database : mysql 5.7.32   개발용(dev) / 배포용(prod) 각각 서브 도메인 적용  🏃 한마디 소프트 스퀘어드 6주차까지의 교육을 마치고 모의 외주 기간이 시작됐다. 집꾸미기 라는 어플을 배정 받았고 당연히 서버 포지션을 맡았다. 기획서 작성하기 전에 앱을 쓱 봤는데 브런치와는 비교도 안되게 어려워보여서 2주동안 할 수 있을지 걱정이 앞섰다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 28일</title>
      <link>http://sangm1n.github.io/til/2020-10/2020-10-28/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10/2020-10-28/</guid>
      <description>💪 Today I Learned Transaction  데이터베이스의 상태를 변환시키는 작업 수행의 논리적 단위 ACID 특성  원자성 (Atomacity) : All or Nothing 일관성 (Consistency) : 트랜잭션 완료 시 일관적인 데이터베이스 상태 유지 격리성 (Isolation) : 트랜잭션끼리 서로 간섭 X 지속성 (Durability) : 성공적으로 수행된 트랜잭션은 영원히 반영    🏃 한마디 Brunch 어플에서 유일하게 트랜잭션 처리를 해줘야 하는 부분이 있었다. 바로 조회한 게시글이 사용자의 최근 본 글 목록에 들어가는 것이다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 27일</title>
      <link>http://sangm1n.github.io/til/2020-10/2020-10-27/</link>
      <pubDate>Tue, 27 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10/2020-10-27/</guid>
      <description>💪 Today I Learned Brunch API 현황  홈 화면 조회 API path-variable 삭제  홈 화면에서 보여질 게시글 수를 {count}로 전달 -&amp;gt; php 내에서 배열에 저장해 랜덤으로 쿼리에 전달   API 출력 결과 변경  아래 사진처럼 리스트 형태로 뜨는 값들 묶어줬다.    회원가입 API 구현  사실 Brunch 어플은 카카오 계정으로 로그인 기능만 가능하다. 그래서 임의로 이메일과 패스워드를 통해 회원가입 가능하도록 작성했다. 이메일 / 패스워드 / 핸드폰 번호 각각 정규표현식 적용해 validation 처리   Transaction 적용  COMMIT : 게시글 조회 성공 시 최근 본 글 과 최근 본 작품 목록에 각각 들어가도록 ROLLBACK : 게시글 조회 실패 시    🏃 한마디 오늘 OAuth를 이용해 소셜 로그인 연동까지 되도록 했어야 깔끔한데 기존 쿼리 수정하다보니 시간이 촉박해서 못했다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 26일</title>
      <link>http://sangm1n.github.io/til/2020-10/2020-10-26/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10/2020-10-26/</guid>
      <description>💪 Today I Learned Brunch API JWT 적용 홈 화면 조회 API를 제외한 모든 API에 올바르지 못한 토큰으로 요청이 올 경우 전부 막아줬다. 그리고 기존 코드에서 나에 해당하는 userId 를 쿼리문에 직접 대입시켜 작성한 것을 JWT를 복호화하여 로그인한 사용자의 userId 로 수정했다. 이해하기 어렵게 설명한 것 같아 예시를 더하겠다.
로그인한 사용자(나)의 userId 가 1이라고 가정해보자. 기존에는 특정한 게시글에 좋아요 눌렀는지의 여부를 보여줄 때 쿼리에 나를 명시적으로 넣어줬다.
SELECT likeStatus FROM LikePost WHERE userId = 1; 이 userId 를 JWT payload 부분에 넣어 토큰을 발급했고, 이것을 다시 복호화하여 사용했다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 25일</title>
      <link>http://sangm1n.github.io/til/2020-10/2020-10-25/</link>
      <pubDate>Sun, 25 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10/2020-10-25/</guid>
      <description>💪 Today I Learned OpenCV bitwise  bitwise 이용하여 기존 이미지에 마스킹 이미지 합성  🏃 한마디 내일 영상정보처리 시험이라 예제 코드 익히기 바빴다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 24일</title>
      <link>http://sangm1n.github.io/til/2020-10/2020-10-24/</link>
      <pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10/2020-10-24/</guid>
      <description>💪 Today I Learned 경진대회 보고서 작성  6개 모델 성능 비교  kNN Suport Vector Machine Decision Tree Random Forest LightGBM Xgboost    결국 LightGBM 정확도 0.925로 마무리했다.
🏃 한마디 생각보다 GridSearchCV로 하이퍼 파라미터 튜닝하는 데 시간이 너무 오래 걸렸다. 왜 전문가들이 성능 좋은 데스크탑에서 모델을 학습시키는지 뼈저리게 느낄 수 있었다. 심지어 튜닝하는 동안 다른 작업을 하지 못해 시간이 아깝게만 느껴졌다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 23일</title>
      <link>http://sangm1n.github.io/til/2020-10/2020-10-23/</link>
      <pubDate>Fri, 23 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10/2020-10-23/</guid>
      <description>💪 Today I Learned SMOTE  Synthetic Minority Oversampling TEchnique 데이터 개수가 적은 클래스의 표본을 가져와 임의의 값을 더하여 데이터에 추가  결국 데이터 전처리부터 다시 진행했다. 클래스가 많이 불균형하지는 않지만 최대한 균형을 맞추고 싶었다. 데이터 불균형을 처리하는 방법은 크게
 Undersampling Oversampling CSL (Cost Sensitive Learning)  가 있다. 찾아보니 분석을 위해서는 많은 데이터 확보가 효과적이기 때문에 오버샘플링 기법을 적용하는 것이 좋다고 한다. 그래서 가장 많이 사용하는 SMOTE 알고리즘을 이용했다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 22일</title>
      <link>http://sangm1n.github.io/til/2020-10/2020-10-22/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10/2020-10-22/</guid>
      <description>💪 Today I Learned 머신러닝 경진대회  accuracy : 0.91  저번에 feature selection 해둔 것을 바탕으로 모델 돌려봤는데 정확도가 그리 높지 않다. 테스트할 겸 파라미터 무시한 채 default로 돌리긴 했지만 모든 변수를 사용한 것보다 정확도가 낮다.
🏃 한마디 왠지 내일 싹 다 뒤엎고 처음부터 다시 하는 내 모습이 그려진다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 21일</title>
      <link>http://sangm1n.github.io/til/2020-10/2020-10-21/</link>
      <pubDate>Wed, 21 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10/2020-10-21/</guid>
      <description>💪 Today I Learned 로그인 인증 및 유지 방법
Cookie / Session  Cookie : 클라이언트의 저장소 중 하나 Session : 서버의 저장소  session ID 사용 시 API 요청할 때마다 아이디와 패스워드를 함께 보내지 않아도 되는 1차원적인 해결한다. 하지만 서버에서 관리해줘야 할 것이 늘어나 서버 부하의 문제가 있다.
JWT (Jason Web Token)  Header : meta-data Payload : real data (중요 정보 제외) Signature : Header, Payload, Secret key를 묶어 암호화  서버 부하를 해결했으나 토큰이 탈취될 경우 보안상의 문제가 있다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 20일</title>
      <link>http://sangm1n.github.io/til/2020-10/2020-10-20/</link>
      <pubDate>Tue, 20 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10/2020-10-20/</guid>
      <description>💪 Today I Learned Brunch API 설계 18개 정도 설계해봤는데 아쉬움 투성이다. 못해도 25개 정도는 만들 수 있을거라 생각했지만 하나하나 쿼리문을 다시 작성하는 데 너무 오래 걸렸다. 저번주에 작성해둔 한 방 쿼리가 무용지물이라고 생각이 들 정도로 쿼리에 문제가 많았다. 사실 쿼리 문제라기보다는 테이블들이 마음에 안들었다. ERD 설계를 더 계획적으로 했어야 하지 않나 싶다.
🏃 한마디 내일 수업 때 피드백 받고 다시 보완해야지.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 19일</title>
      <link>http://sangm1n.github.io/til/2020-10/2020-10-19/</link>
      <pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10/2020-10-19/</guid>
      <description>💪 Today I Learned MySQL connection locked 현상 과제 수행 도중 Postman에서 계속 서버 에러가 뜨며 아래 메시지를 날렸다.
ERROR 1129(00000): Host &amp;#39;xxx&amp;#39; is blocked because of many connection errors. Unblock with &amp;#39;mysqladmin flush-hosts&amp;#39; 구글링해보니 MySQL 은 외부에서 비정상적인 접속이라 판단되는 경우 해당 호스트를 블락시킨다고 한다. 이렇게 비정상 접속이라고 판단되는 케이스는
 단순 Connect 후 Disconnet하는 연결이 빈번하거나 접근 계정의 패스워드가 계속해서 불일치하는 경우 혹은 기타 사이버 공격으로 의심되는 케이스  라고 한다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 18일</title>
      <link>http://sangm1n.github.io/til/2020-10/2020-10-18/</link>
      <pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10/2020-10-18/</guid>
      <description>💪 Today I Learned Brunch API 설계  GET /users/{user-idx} GET /users/{user-idx}/intro GET /users/{user-idx}/career GET /users/{user-idx}/post-list GET /users/{user-idx}/category-list  우선은 사용자 페이지 위주로 API를 설계하기 시작했다. 사실 브런치 어플은 웹과 다르게 카카오 계정으로 로그인만 허용해놨다. 그래서 회원가입 API는 일단 뒷전으로 미루고 GET을 통해 조회하는 API들에 집중했다.
🏃 한마디 지금은 전부 path variable로 처리했는데 옳은 방법인지 잘 모르겠다. query string으로 넘겼을 때와 어떤 차이가 있는지 더 알아봐야겠다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 17일</title>
      <link>http://sangm1n.github.io/til/2020-10/2020-10-17/</link>
      <pubDate>Sat, 17 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10/2020-10-17/</guid>
      <description>💪 Today I Learned 서버 재구축  Server program : nginx  어제 AWS 계정을 새로 만든 탓에 서버를 다시 구축했다. phpmyadmin 외부 접속 시키는 것에 반나절을 투자했다. 원래 저번주 과제 때 처리해줬으면 수월하게 했을텐데 처음하는 것이라 오래 걸렸던 것 같다. 사실 경로를 잘못 알아 계속 다른 파일만 수정하고 있었다.
cd /etc/phpmyadmin # phpmyadmin configuration file sudo vi config.inc.php 🏃 한마디 심지어 API 하나 설계하는 데에도 엄청난 시간을 쏟았다. 하나의 API에서 여러 개의 쿼리를 받아오고 싶은데 도무지 결과값 반환이 되지 않았다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 16일</title>
      <link>http://sangm1n.github.io/til/2020-10/2020-10-16/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10/2020-10-16/</guid>
      <description>💪 Today I Learned brunch API 설계  Back-end Language : php DBMS : RDS + mySQL  REST하게 작성하기 위해 많은 자료를 참고해야겠다.
🏃 한마디 AWS 계정 만든지 3주도 안되서 85% 이상 썼다고 메일이 왔다. 서버 구축하고 테스트 용으로 인스턴스를 추가해서 만든 탓이였다. 급한대로 새로운 계정을 하나 생성했고 기존에 있는 인스턴스는 모두 삭제했다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 15일</title>
      <link>http://sangm1n.github.io/til/2020-10/2020-10-15/</link>
      <pubDate>Thu, 15 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10/2020-10-15/</guid>
      <description>💪 Today I Learned Classification model error  Noise : 고칠 수 없는 원본 데이터의 결함 Bias : 데이터 내에 있는 모든 정보를 고려하지 않아 잘못된 것들을 학습하는 경향  Underfitting 유발   Variance : 데이터의 너무 세세한 부분까지 학습하여 모델 변동성이 커짐  Overfitting 유발    Model development process  feature selection algorithm selection hyper parameter tuning evaluation  위와 같은 시퀀스로 진행되는데, 평가를 제외한 모든 과정에서 cross-validation은 필수다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 14일</title>
      <link>http://sangm1n.github.io/til/2020-10/2020-10-14/</link>
      <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10/2020-10-14/</guid>
      <description>💪 Today I Learned API  Application Programming Interface  소프트 스퀘어드 4주차 수업 내용은 API였다. 전공자로써 수도 없이 들어본 용어이지만 정작 정확한 의미를 모르고 있었다. 쉽게 program 간의 매개체 정도로 정의할 수 있을 것 같다.
조금 더 쉬운 예시를 들자면, 사람이 스마트폰 홈 화면을 보기 위해 전원 버튼을 누르는 모습을 상상해보자. 사람은 전원 버튼을 누르면 홈 화면을 볼 수 있다는 사실을 알고 있다. 하지만 어떻게 홈 화면을 보여주는지 내부 로직은 모른다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 13일</title>
      <link>http://sangm1n.github.io/til/2020-10/2020-10-13/</link>
      <pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10/2020-10-13/</guid>
      <description>💪 Today I Learned JOIN  INNER JOIN LEFT JOIN RIGHT JOIN  join은 관계형 데이터베이스에서 굉장히 많이 사용한다. 나도 이번 과제를 하면서 수도 없이 사용했고, 그 중 가장 자주 사용한 세 개의 조인에 대해 알아봤다.
inner join은 교집합이라고 보면 된다. ON 뒤에 두 테이블이 결합하는 조건을 나타낸다.
SELECT * FROM tableA A JOIN tableB B ON A.KEY = B.KEY left join은 왼쪽 테이블 전체와 두 테이블의 교집합 부분을 나타낸다. 반면 right join은 오른쪽 테이블 전체와 두 테이블의 교집합 부분을 함께 나타낸다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 12일</title>
      <link>http://sangm1n.github.io/til/2020-10/2020-10-12/</link>
      <pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10/2020-10-12/</guid>
      <description>💪 Today I Learned Brunch ERD 수정  AqueryTool 이용 데이터 구축을 위한 ERD 최종본  🏃 한마디 ERD 설계를 완성짓는 데 생각보다 너무 오래 걸렸다. 그 외 모든 시간은 한 방 쿼리 작성하는 데 쏟았다. 중요한 몇몇 쿼리문을 정리하여 포스팅하고 싶지만 과제를 기간 안에 끝마치지 못할 것 같아 수요일 이후에 여유가 생기면 작성해야겠다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 11일</title>
      <link>http://sangm1n.github.io/til/2020-10/2020-10-11/</link>
      <pubDate>Sun, 11 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10/2020-10-11/</guid>
      <description>💪 Today I Learned Brunch ERD 수정  AqueryTool 이용  어제 설계했던 ERD를 수정했다. 큰 맥락에서 보면 User / Post / Comment / Follow 네 개의 테이블이 주축을 이룬다. 나머지 테이블들은 모두 카테고리컬한 테이블이라고 봐도 무방하다.
aquerytool의 모든 테이블 생성 SQL 기능을 이용해 테이블을 생성했으니 데이터를 넣는 일만 남았다.
🏃 한마디 사실 오늘 헌혈해서 많은 시간을 할애하지는 못했다. 그래도 어제보다 더 그럴싸하게 다이어그램을 만들어낸 것 같다. 내일은 DB에 데이터를 넣어 실제 앱 화면처럼 데이터를 뽑아내는 한 방 쿼리를 작성해야겠다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 10일</title>
      <link>http://sangm1n.github.io/til/2020-10/2020-10-10/</link>
      <pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10/2020-10-10/</guid>
      <description>💪 Today I Learned Brunch ERD 설계  AqueryTool 이용  원래는 당근마켓 ERD 설계를 하려고 했으나 너무 어려워 보여서 Brunch 로 타겟을 바꿨다.
attribute 뽑아내는 것까지는 여차저차 했는데, entity로 묶는 것부터가 난관이었다. 아마 내일 싹 엎어야할 것 같지만 기록해둘겸 사진으로 저장해놨다. 생각보다 many-to-many 관계를 정의하는 것이 어려웠다.
🏃 한마디 ERD 설계가 끝나야 쿼리문을 작성하고 진도를 나가는데 굉장히 더딘 속도로 진행중인 것 같다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 9일</title>
      <link>http://sangm1n.github.io/til/2020-10/2020-10-09/</link>
      <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10/2020-10-09/</guid>
      <description>💪 Today I Learned Support Vector Machine  경계에 있는 몇 개의 점으로 hyperplane 찾음 차원(kernel) 늘리기  이번주 딥러닝/클라우드 수업 내용은 SVM이었다. 앞부분에 나온 Decision tree나 Random forest는 인공지능 수업 때 배웠기도 해서 과제 진행하는 데 별 무리가 없었다. ICT 인턴십 면접 때 CTO 분께서 SVM에 대해 설명해달라 하셨는데 대답하지 못한 경험이 있다. 그래서 더 열심히 수업들은 것 같다.
SVM은 분류 알고리즘 중 하나로 다른 알고리즘과 다르게 몇 개의 점만을 이용하여 초평면을 구한다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 8일</title>
      <link>http://sangm1n.github.io/til/2020-10/2020-10-08/</link>
      <pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10/2020-10-08/</guid>
      <description>💪 Today I Learned 탄력적 IP  고정된 IP 주소  AWS에서 탄력적 IP (EIP, Elastic IP)를 할당할 수 있다. AWS 인스턴스의 퍼블릭 IP는 유동적인 IP 주소이기 때문에 인스턴스를 중지하고 다시 시작할 경우 해당 IP 주소가 변경된다. 따라서 실제 서비스를 만들고자 할 때 유동 IP를 사용해서는 안된다.
이럴 때 사용하는 것이 고정 IP이다. 단, EIP는 유료 서비스이므로 항상 주의하자.
phpmyadmin VS mysql workbench  둘 다 mysql 접근  소프트 스퀘어드 2주차 과제를 진행하며 phpmyadmin과 mysql workbench를 사용하여 mysql에 외부 접속을 해봤다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 7일</title>
      <link>http://sangm1n.github.io/til/2020-10/2020-10-07/</link>
      <pubDate>Wed, 07 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10/2020-10-07/</guid>
      <description>💪 Today I Learned rDBMS  테이블 간 관계가 형성된 데이터베이스  나는 사실 디비를 잘 모른다. 2학년 1학기 때 수업을 듣긴 했는데 공부를 안하기도 했고, 그 이후 프로젝트 진행할 때도 다루지를 않았다. 연구실에서 데이터 분석 공부를 할 때 필요성을 느꼈고 꼭 배워보고 싶었는데 드디어 제대로 해볼 기회가 생겼다.
위에서 정의했듯이 rDB는 테이블 간 관계가 형성된 데이터베이스를 뜻한다. 이것을 관리하는 rDBMS의 예로는 MySQL / postgreSQL / Oracle 등이 있다.
데이터 모델링  정제된 데이터를 만들기 위한 과정  SQL은 항상 정제된 데이터를 필요로 한다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 6일</title>
      <link>http://sangm1n.github.io/til/2020-10/2020-10-06/</link>
      <pubDate>Tue, 06 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10/2020-10-06/</guid>
      <description>💪 Today I Learned Apache VS Nginx  Apache : MPM 방식, 스레드/프로세스 기반 구조 Nginx : 비동기 Event-Driven 기반 구조  발표 자료 만들다가 문득 궁금해져서 찾아봤다. 2주에 걸쳐 서버 프로그램으로 apache와 nginx를 사용했는데 정작 둘의 차이점은 모르고 있었다. 그래서 오늘 포스팅에 간략하게나마 정리했다. 간단하게 동시 접속 요청이 많을 경우 nginx를 사용하면 될 것 같다.
hard link VS symbolic link (soft link)  hard link : 원본 파일과 동일한 inode를 가진다.</description>
    </item>
    
    <item>
      <title>TIL - 2020년 10월 5일</title>
      <link>http://sangm1n.github.io/til/2020-10/2020-10-05/</link>
      <pubDate>Mon, 05 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10/2020-10-05/</guid>
      <description>💪 Today I Learned AWS 서버 도메인 적용  가비아 도메인 구매 http://sangmini.site  가비아에서 도메인을 하나 구매했다. 무료 도메인을 쓰고 싶었으나 소프트 스퀘어드 수업에서 별로 비싸지 않으니까 아까워하지 말라더라. (1900원/년 이면 진짜 싸긴 싸다)
구매한 도메인을 AWS 서버에 적용했다. 서버 프로그램으로 nginx를 사용 중인데, server block에 해당 도메인을 추가하는 것으로 쉽게 적용할 수 있었다.
https 적용  certbot 이용 (with letsencrypt)  나중에 모의 외주를 하거나 실제 외주를 진행할 때 https 적용은 필수라고 한다.</description>
    </item>
    
    <item>
      <title>TIL 다시 시작하기</title>
      <link>http://sangm1n.github.io/til/2020-10/2020-10-04/</link>
      <pubDate>Sun, 04 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sangm1n.github.io/til/2020-10/2020-10-04/</guid>
      <description>Restart 올해 7월 14일부터 이전 블로그에 TIL을 작성하기 시작했다. 그곳에서의 기록이 9월 19일에 멈췄기 때문에 3주 정도 TIL 작성을 쉬었다. 원래 이 블로그를 만들자마자 다시 시작할 계획이었는데 이런 저런 핑계로 미루게 되었다. 추석 연휴도 끝났으니 더는 미루면 안되겠다고 판단했다.
TIL 규칙 정하기 기존에 나는 아래 사진처럼 Today I Learned / Tomorrow I will Learn 두 파트로 작성해왔다. 애초에 블로그에 많은 시간을 투자하지 않기 위해 &amp;ldquo;기록만 하자&amp;rdquo; 라는 마인드로 진행했는데 지금 보니 턱없이 부실해 보인다.</description>
    </item>
    
  </channel>
</rss>
